<?php
/**
 * @file
 */

/**
 * Implements hook_help().
 */
function WSNsites_help($path, $arg) {
  $output = '';

  switch ($path) {
    case "admin/help#WSNsites":
      $output = '<p>' . t("Provides sites support for WSN") . '</p>';
      break;
  }

  return $output;
}

/**
 * Implements hook_permission().
 */
function WSNsites_permission() {
  return array(
    'WSN Sites: access' => array(
      'title' => t('Access WSN Site'),
    ),
    'WSN Sites: add' => array(
      'title' => t('Add WSN Site'),
    ),
    'WSN Sites: delete all' => array(
      'title' => t('Delete Any WSN Site'),
    ),
    'WSN Sites: delete own' => array(
      'title' => t('Delete Authored WSN Site'),
    ),
    'WSN Sites: edit all' => array(
      'title' => t('Edit Any WSN Site'),
    ),
    'WSN Sites: edit own' => array(
      'title' => t('Edit Authored WSN Site'),
    ),
//    'WSN Sites: edit belonged' => array(
//      'title' => t('Edit Belonged WSN Site'),
//    ),
    'WSN Sites: view all' => array(
      'title' => t('View Any WSN Site'),
    ),
    'WSN Sites: view own' => array(
      'title' => t('View Authored WSN Site'),
    ),
//    'WSN Sites: view belonged' => array(
//      'title' => t('View Belonged WSN Site'),
//    ),
  );
}

/**
 * Implements hook_node_access().
 *
 * Define node access requirements for WSN Sites nodes.
 */
function WSNsites_node_access($node, $op, $account = NULL) {
  $type = is_string($node) ? $node : $node->type;
  // If no account is specified, assume that the check is against the current logged in user
  if (is_null($account)) {
    global $user;
    $account = $user;
  }
  if ($type == 'WSNsites' && $op == 'create') {
    if (user_access('WSN Sites: add', $account)) {
      return NODE_ACCESS_ALLOW;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_menu().
 */
function WSNsites_menu() {
  $items = array();

  $items['WSN/sites/autocomplete'] = array(
    'title' => 'Sites autocomplete',
    'page callback' => 'WSNsites_autocomplete',
    'access arguments' => array('WSN Sites: access'),
    'type' => MENU_CALLBACK,
    'file' => 'WSNsites.admin.inc',
  );
  $items['admin/config/WSN/sites'] = array(
    'title' => 'WSN Sites',
    'description' => 'Administer WSN Sites.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('WSNsites_admin_settings'),
    'access arguments' => array('WSN: access administration pages'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function WSNsites_theme() {
  return array(
    'WSNsites_view' => array(
      'file'      => 'WSNsites.theme.inc',
      'variables' => array('node', 'view_mode'),
    ),
  );
}

/**
 * Implements hook_node_info().
 */
function WSNsites_node_info() {
  return array(
    'WSNsites' => array(
      'name' => t('Sites'),
      'base' => 'WSNsites',
      'description' => t("Site of WSN"),
      'title_label' => t("Name"),
      'body_label' => t("Description"),
    )
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function WSNsites_field_extra_fields() {
  $extra['node']['WSNsites'] = array(
    'form' => array(
      'group1' => array(
        'label' => 'Customer / Active Group',
        'weight' => -21,
      ),
      'group2' => array(
        'label' => 'Site Location',
        'weight' => -19,
      ),
      'group3' => array(
        'label' => 'Site Detail',
        'weight' => -18,
      ),
      'group4' => array(
        'label' => 'Contact Detail',
        'weight' => -17,
      ),
//      'group4' => array(
//        'label' => 'Contact Info 2',
//        'weight' => -17,
//      ),
    ),
  );
  return $extra;
}

/**
 * Implements hook_field_extra_fields_alter().
 */
function WSNsites_field_extra_fields_alter(&$info) {
  $info['node']['WSNsites']['form']['title']['weight'] = -20;
}

/**
 * Implements hook_form().
 */
function WSNsites_form(&$node) {
  $breadcrumb = array();
  $breadcrumb[] = l(t('WSN'), 'WSN');
  $breadcrumb[] = l(t('Sites'), 'WSN/sites');
  drupal_set_breadcrumb($breadcrumb);

  $type = node_type_get_type($node);
  $info = field_info_extra_fields('node', 'WSNsites', 'form');

  $form['#attributes']['class'] = 'WSNcomponent_node_form';

  $form['group1'] = array(
        '#type' => 'markup',
        //'#title' => 'Customer / Active Group',
        '#theme' => 'WSN_form_group',
        '#weight' => $info['group1']['weight'],
  );

  $form['group1']['iscustomer'] = array(
        '#type' => 'checkbox',
        '#title' => t('Customer'),
        '#default_value' => $node->iscustomer,
  );

  $form['group1']['isactive'] = array(
        '#type' => 'checkbox',
        '#title' => t('Active'),
        '#default_value' => $node->isactive,
  );
  $form['title'] = array(
        '#type' => 'textfield',
        '#title' => check_plain($type->title_label),
        '#required' => TRUE,
        '#default_value' => $node->title,
        '#weight' => $info['title']['weight'],
  );
  $form['group2'] = array(
    '#type' => 'fieldset',
    '#title' => 'Site Location',
    '#description' => 'Site Location Address',
    '#theme' => 'WSN_form_group',
    '#weight' => $info['group2']['weight'],
  );

  $form['group2']['address'] = array(
    '#type' => 'textfield',
    '#title' => t('Address'),
    '#default_value' => isset($node->address) ? $node->address : NULL,
    '#size' => 30,
    '#weight' => 1,
  );
  $form['group2']['city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#size' => 15,
    '#default_value' => isset($node->city) ? $node->city : NULL,
    '#weight' => 2,
  );
  $form['group2']['provstate'] = array(
    '#type' => 'textfield',
    '#title' => t('County'),
    '#size' => 15,
    '#default_value' => isset($node->provstate) ? $node->provstate : NULL,
    '#weight' => 3,
  );
  $country_list = WSN_attributes_bydomain('Country');
  $form['group2']['country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#options' => $country_list['values'],
    '#default_value' => $node->country,
    '#weight' => 4,
  );
  $form['group2']['zip'] = array(
    '#type' => 'textfield',
    '#title' => t('Post Code'),
    '#size' => 10,
    '#default_value' => isset($node->zip) ? $node->zip : NULL,
    '#weight' => 5,
  );
  
  $form['group3'] = array(
    '#type' => 'fieldset',
    '#title' => 'Site Details',
    '#description' => 'Site Location Detail',
    '#theme' => 'WSN_form_group',
    '#weight' => $info['group3']['weight'],
  );

  $form['group3']['latitude'] = array(
    '#type' => 'textfield',
    '#title' => t('Latitude'),
    '#size' => 15,
    '#weight' => 6,
    '#default_value' => isset($node->latitude) ? $node->latitude : NULL,
  );
  
  $form['group3']['longitude'] = array(
    '#type' => 'textfield',
    '#title' => t('Longitude'),
    '#size' => 15,  
    '#weight' => 7,
    '#default_value' => isset($node->longitude) ? $node->longitude : NULL,
  );
    $form['group3']['elevation_m'] = array(
    '#type' => 'textfield',
    '#title' => t('Elevation (m)'),
    '#size' => 15,  
    '#weight' => 8,
    '#default_value' => isset($node->elevation_m) ? $node->elevation_m : NULL,
  );

  $form['group4'] = array(
    '#type' => 'fieldset',
    '#title' => 'Contact Detail',
    '#description' => 'Contact Details',
    '#theme' => 'WSN_form_group',
    '#weight' => $info['group4']['weight'],
  );

  $form['group4']['contactid'] = array(
    '#title' => t('Contact Name'),
    '#type' => 'textfield',
    '#size' => 15,
    '#default_value' => isset($node->contactid) ? $node->contactid : NULL,
  );
  
  $form['group4']['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#size' => 15,
    '#default_value' => isset($node->phone) ? $node->phone : NULL,
  );

 $form['group4']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail'),
    '#size' => 30,
    '#default_value' => isset($node->email) ? $node->email : NULL,
  );
 
  $language_list = WSN_attributes_bydomain('language');
    $form['group4']['language'] = array(
    '#type' => 'select',
    '#title' => t('Language'),
    '#options' => $language_list['values'],
    '#default_value' => $node->language,
  );


  // Check to see if the body field is still there, if so display it
  $body = field_get_items('WSNsites', $node, 'body');
  if ($body) {
    $form['body_field'] = $body;
    
  }

  $form['title_old'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($node->title_old) ? $node->title_old : NULL,
  );

  return $form;
}

/**
 * Implements hook_insert().
 */
function WSNsites_insert($node) {
  db_insert('WSNsites')
    ->fields(array(
      'vid' => $node->vid,
      'nid' => $node->nid,
      'iscustomer' => $node->iscustomer,
      'isactive' => $node->isactive,
//      'isprovider' => $node->isprovider,
      'country' => $node->country,
      'provstate' => $node->provstate,
      'zip' => $node->zip,
      'city' => $node->city,
      'address' => $node->address,
      'longitude' => $node->longitude,
      'latitude' => $node->latitude,
      'elevation_m' => $node->elevation_m,
//      'www' => $node->www,
//      'currency' => $node->currency,
//      'taxid' => $node->taxid,
//      'orglanguage' => $node->orglanguage,
//      'pricemode' => $node->pricemode,
//      'price' => $node->price,
      'contactid' => $node->contactid,
      'language' => $node->language,
      'phone' => $node->phone,
      'email' => $node->email,
    ))
    ->execute();
}

/**
 * Implements hook_update().
 */
function WSNsites_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    WSNsites_insert($node);
  }
  else {
    db_update('WSNsites')
      ->fields(array(
        'iscustomer' => $node->iscustomer,
        'isactive' => $node->isactive,
//        'isprovider' => $node->isprovider,        
        'country' => $node->country,
        'provstate' => $node->provstate,
        'zip' => $node->zip,
        'city' => $node->city,
        'address' => $node->address,
        'longitude' => $node->longitude,
        'latitude' => $node->latitude,
        'elevation_m' => $node->elevation_m,
//      'taxid' => $node->taxid,
//      'orglanguage' => $node->orglanguage,
//      'www' => $node->www,
//      'pricemode' => $node->pricemode,
//      'price' => $node->price,
        'contactid' => $node->contactid,
        'phone' => $node->phone,
        'email' => $node->email,
        'language' => $node->language,
//      'currency' => $node->currency,
        
      ))
      ->condition('vid', $node->vid, '=')
      ->execute();

    if ($node->title != $node->title_old) {
      module_invoke_all('WSNsites_change', $node->nid, $node->title);
    }
  }
}

/**
 * Implements hook_node_prepare().
 */
function WSNsites_node_prepare($node) {
  if (!isset($node->nid)) {
    $node->iscustomer = 1;
//    $node->isprovider = 0;
    $node->isactive = 1;

    $country_list = WSN_attributes_bydomain('Country');
    $node->country = $country_list['default'];
    
    $language_list = WSN_attributes_bydomain('Language');
    $node->language = $language_list['default'];
    
//    $currency_list = WSN_attributes_bydomain('Currency');
//    $node->currency = $currency_list['default'];
//
//    $pricemode_list = WSN_attributes_bydomain('Price mode');
//    $node->pricemode = $pricemode_list['default'];
  }
}

/**
 * Implements hook_node_revision_delete().
 */
function WSNsites_node_revision_delete($node) {
  // Notice that we're matching a single revision based on the node's vid.
  db_delete('WSNsites')
    ->condition('vid', $node->vid)
    ->execute();
}

/**
 * Implements hook_delete().
 */
function WSNsites_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  db_delete('WSNsites')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_load().
 */
function WSNsites_load($nodes) {
  foreach ($nodes as $nid => &$node) {
    $result = db_select('WSNsites', 'sor')
      ->fields('sor')
      ->condition('vid', $node->vid)
      ->execute();
    $record = array();
    $record = $result->fetchAssoc();
    if ($record) {
      foreach ($record as $key => $value) {
        $node->$key = $value;
      }
    }

    $node->title_old = $node->title;
  }
}

/**
 * Implements hook_view().
 */
function WSNsites_view($node, $view_mode) {
  if ($view_mode == 'full' && node_is_page($node)) {
    $breadcrumb = array();
    $breadcrumb[] = l(t('WSN'), 'WSN');
    $breadcrumb[] = l(t('Sites'), 'WSN/sites');
    drupal_set_breadcrumb($breadcrumb);
  }

  return theme('WSNsites_view', array('node' => $node, 'view_mode' => $view_mode));
}

/**
 * Admin settings form for WSNproject module
 */
function WSNsites_admin_settings() {
  $form = array();

  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('status', 1)
    ->condition('type', 'WSNsites')
    ->addTag('node_access')
    ->orderBy('title', 'ASC');

  $result = $query->execute();

  $sitess = array();
  while ($sites = $result->fetchObject()) {
    $sitess[$sites->nid] = $sites->title;
  }

  if (count($sitess) > 0) {
    $form['WSN_sites_nid'] = array(
      '#type' => 'select',
      '#title' => t('Host Sites'),
      '#options' => $sites,
      '#default_value' => variable_get('WSN_sites_nid', 0),
      '#description' => t('The sites that owns this system'),
      '#weight' => -30,
    );
  }
  else {
    $form['WSN_sites_nid'] = array(
      '#type' => 'item',
      '#title' => t('Host sites'),
      '#markup' => t('There are no WSN Sites in the system.') . '<br />' . l(t('Create a WSN Sites'), 'node/add/WSNsites'),
    );
  }
  return system_settings_form($form);
}

/**
 * Implements hook_views_api().
 */
function WSNsites_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'WSNsites'),
  );
}


/**
 * Implements hook_node_access_records().
 */
function WSNsites_node_access_records($node) {
  if (empty($node->status)) {
    // Lets Drupal take care of permission to unpublished nodes.
    return array();
  }
  $type = is_string($node) ? $node : $node->type;
  $grants = array();
  if ($type == 'WSNsites') {
    // WSN Sites: view all
    $grants[] = array(
      'realm' => 'WSNsites_view_all',
      'gid' => 0,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // WSN Sites: view own
    $grants[] = array(
      'realm' => 'WSNsites_view_own',
      'gid' => $node->uid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // WSN Sites: view belonged
//    $grants[] = array(
//      'realm' => 'WSNsites_view_if_user_org',
//      'gid' => $node->nid,
//      'grant_view' => 1,
//      'grant_update' => 0,
//      'grant_delete' => 0,
//      'priority' => 0,
//    );

    // WSN Sites: edit all
    $grants[] = array(
      'realm' => 'WSNsites_update_all',
      'gid' => 0,
      'grant_view' => 0,
      'grant_update' => 1,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // WSN Sites: edit own
    $grants[] = array(
      'realm' => 'WSNsites_update_own',
      'gid' => $node->uid,
      'grant_view' => 0,
      'grant_update' => 1,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // WSN Sites: edit belonged
//    $grants[] = array(
//      'realm' => 'WSNsites_update_if_user_org',
//      'gid' => $node->nid,
//      'grant_view' => 0,
//      'grant_update' => 1,
//      'grant_delete' => 0,
//      'priority' => 0,
//    );
    // WSN Sites: delete all
    $grants[] = array(
      'realm' => 'WSNsites_delete_all',
      'gid' => 0,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 1,
      'priority' => 0,
    );
    // WSN Sites: delete own
    $grants[] = array(
      'realm' => 'WSNsites_delete_own',
      'gid' => $node->uid,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 1,
      'priority' => 0,
    );
  }
  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function WSNsites_node_grants($account, $op) {

//  $is_WSNperson = FALSE;
//  if (!isset($account->WSNsites_nid) && module_exists('WSNperson')) {
//    _WSNperson_user_load($account);
//  }
//  if (isset($account->WSNperson_nid) AND $account->WSNperson_nid > 0) {
//    $is_WSNperson = TRUE;
//  }
  $grants = array();
  switch ($op) {
    case 'view':
      if (user_access('WSN Sites: view all', $account)) {
        $grants['WSNsites_view_all'] = array(0);
      }
      if (user_access('WSN Sites: view own', $account)) {
        $grants['WSNsites_view_own'] = array($account->uid);
      }
//      if ($is_WSNperson) {
//        if (user_access('WSN Sites: view belonged', $account)) {
//          $grants['WSNsites_view_if_user_org'] = array($account->WSNsites_nid);
//        }
//      }
      break;

    case 'update':
      if (user_access('WSN Sites: edit all', $account)) {
        $grants['WSNsites_update_all'] = array(0);
      }
      if (user_access('WSN Sites: edit own', $account)) {
        $grants['WSNsites_update_own'] = array($account->uid);
      }
//      if ($is_WSNperson) {
//        if (user_access('WSN Sites: edit belonged', $account)) {
//          $grants['WSNsites_update_if_user_org'] = array($account->WSNsites_nid);
//        }
//      }
      break;

    case 'delete':
      if (user_access('WSN Sites: delete all', $account)) {
        $grants['WSNsites_delete_all'] = array(0);
      }
      if (user_access('WSN Sites: delete own', $account)) {
        $grants['WSNsites_delete_own'] = array($account->uid);
      }
      break;
  }
  return $grants;
}

/**
 * Implements hook_WSN_dashboard_links().
 */
function WSNsites_WSN_dashboard_links($type) {
  $links = array();
  if ($type == 'page' || $type == 'block') {
    $links[] = array(
      'theme' => 'WSN_dashboard_link',
      'title' => t('Sites'),
      'icon' => 'WSNsites',
      'path' => 'WSN/sites',
      'params' => array(),
      'node_type' => 'WSNsites',
      'add_type' => 'WSNsites',
      'map' => array(),
      'weight' => 1,
    );
  }
  return $links;
}
