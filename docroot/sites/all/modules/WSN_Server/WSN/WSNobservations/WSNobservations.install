<?php
/**
 * @file
 * Install, disable, uninstall and update functions for WSNobservations module.
 */

/**
 * Implements hook_install().
 */
function WSNobservations_install() {
  variable_set('node_options_WSNobservations', array('status'));
  variable_set('node_permissions_WSNobservations', 0);

  // Uncache node types
  node_types_rebuild();

  // Fetch list of current node types and add body field to WSNobservations
  $types = node_type_get_types();
  node_add_body_field($types['WSNobservations'], 'Description');
// Add instance of date field.
//  field_create_instance(array(
//    'field_name' => 'wsn_date',
//    'label' => 'Date',
//    'widget' => array(
//      'weight' => '-18',
//      'type' => 'date_text',
//      'module' => 'date',
//      'active' => 1,
//      'settings' => array(
//        'input_format' => 'm/d/Y - H:i:s',
//        'input_format_custom' => '',
//        'year_range' => '-3:+3',
//        'increment' => 15,
//        'label_position' => 'above',
//        'text_parts' => array(),
//      ),
//    ),
//    'settings' => array(
//      'default_value' => 'now',
//      'default_value_code' => '',
//      'default_value2' => 'same',
//      'default_value_code2' => '',
//      'user_register_form' => FALSE,
//    ),
//    'display' => array(
//      'default' => array(
//        'label' => 'above',
//        'type' => 'date_default',
//        'settings' => array(
//          'format_type' => 'long',
//          'multiple_number' => '',
//          'multiple_from' => '',
//          'multiple_to' => '',
//          'fromto' => 'both',
//        ),
//        'module' => 'date',
//        'weight' => 1,
//      ),
//      'teaser' => array(
//        'type' => 'hidden',
//        'label' => 'above',
//        'settings' => array(),
//        'weight' => 0,
//      ),
//    ),
//    'required' => 0,
//    'entity_type' => 'node',
//    'bundle' => 'WSNobservations',
//  ));
  
  $attributes = array();

  $attributes['Observation Category'] = array(
    'OK' => 'OK',
    'FR' => 'Forecasted',
    'IN' => 'Interpolated',
    'ER' => 'Error',
  );

  $attributes['Observation Category Search'] = array(
    '-' => 'all',
    'OK' => 'OK',
    'FR' => 'Forecasted',
    'IN' => 'Interpolated',
    'ER' => 'Error',
  );

  $attributes['Observation Error'] = array(
    'ER0' => 'N/A',
    'ER1' => 'Unexpected',
    'ER2' => 'Out of Range',
    'ER3' => 'Undefined',
  );

  $attributes['Observation Error Search'] = array(
    '-' => 'all',
    'ER0' => 'N/A',
    'ER1' => 'Unexpected',
    'ER2' => 'Out of Range',
    'ER3' => 'Undefined',
  );

  $prevdomain = '';
  $weight = 0;
  foreach ($attributes as $domain => $attribute) {
    if ($domain != $prevdomain) $weight=0;
    foreach ($attribute as $key => $value) {
      db_insert('WSNattribute')
        ->fields(array(
          'domain' => $domain,
          'akey' => $key,
          'avalue' => $value,
          'weight' => $weight,
        ))
        ->execute();

      $weight++;
    }
    $prevdomain = $domain;
  }

  db_update('WSNattribute')
    ->fields(array('isdefault' => '1'))
    //->condition('domain', 'Observations Category')
    ->condition('akey', 'Observations')
    ->execute();
}

/**
 * Implements hook_disable().
 */
function WSNobservations_disable() {
  node_access_needs_rebuild(TRUE);
  drupal_set_message(t('Nodes of type "Observations" have not been deleted on disabling WSN Observations. Please note that they will now have reduced functionality, and will not be protected by WSN Observations access controls.'), 'warning');
}

/**
 * Implements hook_enable().
 */
function WSNobservations_enable() {
  node_access_needs_rebuild(TRUE);
}

/**
 * Implements hook_uninstall().
 */
function WSNobservations_uninstall() {
  drupal_uninstall_schema('WSNobservations');

  db_delete('WSNattribute')
    ->condition('domain', array('Observations Category', 'Observations Category Search', 'Observations Error', 'Observations Error Search'), 'IN')
    ->execute();
}

/**
 * Implements hook_schema().
 */
function WSNobservations_schema() {
  $schema['WSNobservations'] = array(
    'fields'        => array(
      'vid'                 => array('type' => 'int', 'not null' => TRUE, 'default' => 0),
      'nid'                 => array('type' => 'int', 'not null' => TRUE, 'default' => 0),
      
      'value'               => array('type' => 'int', 'default' => 0),
      'datetime'            => array('type' => 'int', 'default' => 0),
      
      'sites_nid'           => array('type' => 'int'),
      'sites_title'         => array('type' => 'varchar', 'length' => 150),
      'nodes_nid'           => array('type' => 'int'),
      'nodes_title'         => array('type' => 'varchar', 'length' => 150),
      'sensors_nid'         => array('type' => 'int'),
      'sensors_title'       => array('type' => 'varchar', 'length' => 150),
      
      'observationCategory'     => array('type' => 'varchar', 'length' => 100),
      'observationError'        => array('type' => 'varchar', 'length' => 100),
//      'parent_nid'          => array('type' => 'int'),
//      'weight'              => array('type' => 'int'), 
//      'Observationstatus'          => array('type' => 'varchar', 'length' => 100),
//      'pricemode'           => array('type' => 'varchar', 'length' => 100),
//      'price'               => array('type' => 'float'),
//      'currency'            => array('type' => 'varchar', 'length' => 100),
//      'dateend'             => array('type' => 'int', 'default' => 0),
//      'durationunit'        => array('type' => 'varchar', 'length' => 100),
//      'duration'            => array('type' => 'float', 'default' => 0),
//      'assigned_nid'        => array('type' => 'int'),
//      'assigned_title'      => array('type' => 'varchar', 'length' => 100),
//      'billable'            => array('type' => 'int', 'default' => 0),
//      'billed'              => array('type' => 'int', 'default' => 0),
    ),
    'primary key' => array('vid'),
    'indexes'     => array(
      'nid'               => array('nid'),
      'sites_nid'         => array('sites_nid'),
      'nodes_nid'         => array('nodes_nid'),
      'sensors_nid'       => array('sensors_nid'),
//      'assigned_nid'      => array('assigned_nid'),
//      'parent_nid'        => array('parent_nid'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_update_last_removed().
 */
//function WSNobservations_update_last_removed() {
//  return 6202;
//}

/**
 * Implements hook_update_dependencies().
 */
//function WSNobservations_update_dependencies() {
//  // Ensure that billing status field is created before instance.
//  $dependencies['WSNobservations'][7103] = array(
//    'WSN' => 7102,
//  );
//
//  return $dependencies;
//}
/**
 * Adds Drupal 7 style body field to WSN Observations nodes
 */
//function WSNobservations_update_7100() {
//  // Uncache node types
//  node_types_rebuild();
//
//  // Fetch list of current node types
//  $types = node_type_get_types();
//
//  // Add body field to WSN Observations
//  node_add_body_field($types['WSNobservations'], 'Description');
//
//  return 'Added D7 style body field to WSN Observations nodes';
//}
//
///**
// * Allow WSN to override the default content type permissions
// */
//function WSNobservations_update_7101() {
//  variable_set('node_permissions_WSNobservations', 0);
//  return 'WSN Observations permissions overridden';
//}
//
///**
// * Display message to admin regarding need to rebuild permission.
// */
//function WSNobservations_update_7102() {
//  node_access_needs_rebuild(TRUE);
//}

/**
 * Add date field to PM Task.
 */
//function WSNobservations_update_7103() {
//  // Create field instance.
//  field_create_instance(array(
//    'field_name' => 'wsn_date',
//    'label' => 'Date',
//    'widget' => array(
//      'weight' => '-18',
//      'type' => 'date_text',
//      'module' => 'date',
//      'active' => 1,
//      'settings' => array(
//        'input_format' => 'm/d/Y - H:i:s',
//        'input_format_custom' => '',
//        'year_range' => '-3:+3',
//        'increment' => 15,
//        'label_position' => 'above',
//        'text_parts' => array(),
//      ),
//    ),
//    'settings' => array(
//      'default_value' => 'now',
//      'default_value_code' => '',
//      'default_value2' => 'same',
//      'default_value_code2' => '',
//      'user_register_form' => FALSE,
//    ),
//    'display' => array(
//      'default' => array(
//        'label' => 'above',
//        'type' => 'date_default',
//        'settings' => array(
//          'format_type' => 'long',
//          'multiple_number' => '',
//          'multiple_from' => '',
//          'multiple_to' => '',
//          'fromto' => 'both',
//        ),
//        'module' => 'date',
//        'weight' => 1,
//      ),
//      'teaser' => array(
//        'type' => 'hidden',
//        'label' => 'above',
//        'settings' => array(),
//        'weight' => 0,
//      ),
//    ),
//    'required' => 0,
//    'entity_type' => 'node',
//    'bundle' => 'WSNobservations',
//  ));
//
////  // Migrate data
//////  $query = db_select('WSNobservations', 'pmta');
//////  $query->join('node', 'n', 'n.vid = pmta.vid');
//////  $result = $query
//////    ->fields('pmta', array('nid', 'vid', 'datebegin', 'dateend'))
//////    ->execute();
////
////  foreach ($result as $record) {
////    $node = node_load($record->nid);
////
////    $node->wsn_date[LANGUAGE_NONE][0]['value'] = date('Y-m-d H:i:s', $record->datetime);
//////    $node->wsn_date[LANGUAGE_NONE][0]['value2'] = date('Y-m-d H:i:s', $record->dateend);
////    field_attach_presave('node', $node);
////    field_attach_update('node', $node);
////  }
////
////  // Delete columns from existing database table.
////  db_drop_field('WSNobservations', 'datetime');
////  //db_drop_field('WSNobservations', 'dateend');
////}
