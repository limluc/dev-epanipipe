<?php

/**
 * @file
 */

/**
 * Implements hook_help().
 */
function WSNsensors_help($path, $arg) {
  $o = '';

  switch ($path) {
    case "admin/help#WSNsensors":
      $o = '<p>' . t("Provides Sensors Level for WSN") . '</p>';
      break;
  }

  return $o;
}

/**
 * Implements hook_permission().
 */
function WSNsensors_permission() {
  return array(
    'WSN sensors: access' => array(
      'title' => t('Access WSN sensors'),
    ),
    'WSN sensors: add' => array(
      'title' => t('Add WSN sensors'),
    ),
    'WSN sensors: delete all' => array(
      'title' => t('Delete Any WSN sensors'),
    ),
    'WSN sensors: delete own' => array(
      'title' => t('Delete Authored WSN sensors'),
    ),
    'WSN sensors: delete of user sites' => array(
      'title' => t('Delete WSN sensors in own sites'),
    ),
//    'WSN sensors: delete if sensors manager' => array(
//      'title' => t('Delete WSN sensors if sensors manager'),
//    ),
//    'WSN sensors: delete if assigned to sensors' => array(
//      'title' => t('Delete WSN sensors if assigned to sensors'),
//    ),
    'WSN sensors: edit all' => array(
      'title' => t('Edit Any WSN sensors'),
    ),
    'WSN sensors: edit own' => array(
      'title' => t('Edit Authored WSN sensors'),
    ),
    'WSN sensors: edit of user sites' => array(
      'title' => t('Edit WSN sensors in own sites'),
    ),
//    'WSN sensors: edit if sensors manager' => array(
//      'title' => t('Edit WSN sensors if sensors manager'),
//    ),
//    'WSN sensors: edit if assigned to sensors' => array(
//      'title' => t('Edit WSN sensors if assigned to sensors'),
//    ),
    'WSN sensors: view all' => array(
      'title' => t('View Any WSN sensors'),
    ),
    'WSN sensors: view own' => array(
      'title' => t('View Authored WSN sensors'),
    ),
    'WSN sensors: view of user sites' => array(
      'title' => t('View WSN sensors in own sites'),
    ),
//    'WSN sensors: view if sensors manager' => array(
//      'title' => t('View WSN sensors if sensors manager'),
//    ),
//    'WSN sensors: view if assigned to sensors' => array(
//      'title' => t('View WSN sensors if assigned to sensors'),
//    ),
//    'Test' => array(
//      'title' => t('Access Test'),
//    ),
  );
}

/**
 * Implements hook_node_access().
 */
function WSNsensors_node_access($node, $op, $account = NULL) {
  $type = is_string($node) ? $node : $node->type;
  if ($type == 'WSNsensors') {
    // If no account is specified, assume that the check is against the current logged in user
    if (is_null($account)) {
      global $user;
      $account = $user;
    }
    if ($op == 'create' AND user_access('WSN Sensors: add', $account)) {
      return NODE_ACCESS_ALLOW;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_menu().
 */
function WSNsensors_menu() {
    $items = array();

    $items['admin/config/WSN/sensors'] = array(
      'title' => 'WSN sensors',
      'description' => 'Administer WSN Sensors.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('WSNsensors_admin_settings'),
      'access arguments' => array('WSN: access administration pages'),
      'type' => MENU_LOCAL_TASK,
    );

  return $items;
}

/**
 * Implements hook_theme().
 */
function WSNsensors_theme() {
  return array(
    'WSNsensors_view' => array(
      'file'      => 'WSNsensors.theme.inc',
      'variables' => array('node', 'view_mode'),
    ),
  );
}

/**
 * Implements hook_node_info().
 */
function WSNsensors_node_info() {
  return array(
    'WSNsensors' => array(
      'name' => t('Sensors'),
      'base' => 'WSNsensors',
      'description' => t("Sensor Level of WSN"),
      'title_label' => t("Title"),
      'body_label' => t("Description"),
    )
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function WSNsensors_field_extra_fields() {
  $extra['node']['WSNsensors'] = array(
    'form' => array(
      'group1' => array(
        'label' => 'Sites / Nodes / Sensors',
        'weight' => -20,
      ),
      'group2' => array(
        'label' => 'Medium / Unit',
        'weight' => -19,
      ),
      'group3' => array(
        'label' => 'Category / Status / Error Group',
        'weight' => -18,
      ),
      'group4' => array(
        'label' => 'Sensor Characteristic',
        'weight' => -17,
      ),
       'group5' => array(
        'label' => 'Node Parsing',
        'weight' => -16,
      ),
      'group6' => array(
        'label' => 'Notification Centre',
        'weight' => -15,
      ),
    ),
  );
  return $extra;
}

/**
 * Implements hook_field_extra_fields_alter().
 */
function WSNsensors_field_extra_fields_alter(&$info) {
  $info['node']['WSNsensors']['form']['title']['weight'] = -21;
}

/**
 * Implements hook_WSNsites_change().
 */
function WSNsensors_WSNsites_change($sites_nid, $sites_title) {
  db_update('WSNsensors')
    ->fields(array('sites_title' => $sites_title))
    ->condition('sites_nid', $sites_nid)
    ->execute();
}

/**
 * Implements hook_WSNsites_change().
 */
function WSNsensors_WSNnodes_change($nodes_nid, $nodes_title) {
  db_update('WSNsensors')
    ->fields(array('nodes_title' => $nodes_title))
    ->condition('nodes_nid', $nodes_nid)
    ->execute();
}

/**
 * Implements hook_form().
 */
function WSNsensors_form($node, &$form_state) {
  $breadcrumb = array(
    l(t('WSN'), 'WSN'),
    l(t('Sensors'), 'WSN/sensors'),
  );
  drupal_set_breadcrumb($breadcrumb);

//  if (arg(1)=='add') {
////    $node->datebegin = time();
////    $node->dateend = time();
//
//    if (array_key_exists('sites_nid', $_GET) && !$node->sites) {
//      $node->sites_nid = $_GET['sites_nid'];
//    }
//    if (array_key_exists('nodes_nid', $_GET) && !$node->nodes) {
//      $node->nodes_nid = $_GET['nodes_nid'];
//      $p = node_load($node->nodes_nid);
//      // Ensure that the correct sites is loaded
//      $node->sites_nid = $p->sites_nid;
//      
//     if (!drupal_valid_path('node/' . $node->nodes_nid)) {
//        drupal_set_message(t("You cannot add sensor for this node, as you do not have access to view the nodes's profile"));
//        drupal_goto('node/' . $node->nodes_nid);
//      }
//    }
//    
//    if (isset($_SESSION['WSNsensors_list_filter']['sites_nid']) && !$node->sites_nid) {
//      $node->sites_nid = $_SESSION['WSNsensors_list_filter']['sites_nid'];
//    }
//    $sit_query = db_select('node', 'n');
//    $sit_query->join('WSNsites', 'sor', 'n.vid = sor.vid');
//    $sit_query
//      ->fields('n', array('nid', 'title'))
//      ->condition('n.status', 1)
//      ->condition('n.type', 'WSNsites')
//      ->condition('sor.isactive', 1)
//      ->addTag('node_access')
//      ->orderBy('n.title', 'ASC');
//
//    //$node->billable = variable_get('WSNsensors_billable_default', FALSE);
//
//  }
//  else {
//    $sit_query = db_select('node', 'n');
//    $sit_query->join('WSNsites', 'sor', 'n.vid = sor.vid');
//    $sit_query
//      ->fields('n', array('nid', 'title'))
//      ->condition('n.status', 1)
//      ->condition('n.type', 'WSNsites')
//      ->addTag('node_access')
//      ->orderBy('n.title', 'ASC');
//  }

  $type = node_type_get_type($node);
  $info = field_info_extra_fields('node', 'WSNsensors', 'form');

  $form['#prefix'] = '<div id="WSNsensors-form-wrapper">';
  $form['#suffix'] = '</div>';
  
  
 // $form['#attributes']['class'] = 'WSNcomponent_node_form';

  
//  $form['title'] = array(
//    '#type' => 'textfield',
//    '#title' => check_plain($type->title_label),
//    '#required' => TRUE,
//    '#default_value' => $node->title,
//    '#weight' => $info['title']['weight'],
//  );

  $form['group1'] = array(
    '#type' => 'fieldset',
    '#title' => 'WSN Tree',
    '#theme' => 'WSN_form_group',
    '#weight' => $info['group1']['weight'],
  );
  
  $sit_query = db_select('node', 'n');
  $sit_query->join('WSNsites', 'sor', 'n.vid = sor.vid');
  $sit_result = $sit_query
      ->fields('n', array('nid', 'title'))
      ->condition('n.status', 1)
      ->condition('sor.isactive', 1)
      ->condition('n.type', 'WSNsites')
      ->addTag('node_access')
      ->orderBy('n.title', 'ASC')
      ->execute();
      
  $sitess = array();
  foreach ($sit_result as $sites) {
    $sitess[$sites->nid] = $sites->title;
    if (!isset($node->sites_nid)) $node->sites_nid = $sites->nid;
  }
  //  if (!isset($node->sites_nid)) {
  //    drupal_set_message(t('Please add an  to the system before trying to add a sensors.'), 'error');
  //  }
  $form['group1']['sites_nid'] = array(
    '#type' => 'select',
    '#title' => t('Site'),
    '#options' => $sitess,
    '#default_value' => isset($node->sites_nid) ? $node->sites_nid : NULL,
    '#required' => TRUE,
    '#ajax' => array(
      'callback' => 'WSNsensors_form_ajax',
      'wrapper' => 'WSNsensors-form-wrapper',
    ),
  );
  if (isset($node->sites_nid)) {
      $sites_nid = isset($form_state['values']['sites_nid']) ? $form_state['values']['sites_nid'] : $node->sites_nid;
    }
    else {
      drupal_set_message(t('Please add a Site to the system before trying to add a Sensor.'), 'error');
      $sites_nid = NULL;
    }
  
//  $form['group1']['sites_nid_old'] = array(
//    '#type' => 'hidden',
//    '#default_value' => isset($node->sites_nid) ? $node->sites_nid : NULL,
//  );
  
    $nod_query = db_select('node', 'n');
    $nod_query->join('WSNnodes', 'spa', 'n.vid = spa.vid');
    $nod_result = $nod_query
    ->fields('n', array('nid', 'title'))
    ->condition('n.status', 1)
    ->condition('spa.sites_nid', $sites_nid)
    ->condition('n.type', 'WSNnodes')
    ->addTag('node_access')
    ->orderBy('n.title', 'ASC')
    ->execute();

  $nodess = array();
  foreach ($nod_result as $nodes) {
    $nodess[$nodes->nid] = $nodes->title;
    if (!isset($node->nodes_nid)) $node->nodes_nid = $nodes->nid;
  }
  $form['group1']['nodes_nid'] = array(
    '#type' => 'select',
    '#title' => t('Node'),
    '#default_value' => isset($node->nodes_nid) ? $node->nodes_nid : NULL,
    '#options' => $nodess,
    '#required' => TRUE,
    '#prefix' => '<div id="WSNsensors-nodes-nid">',
    '#suffix' => '</div>',
    '#ajax' => array(
      'callback' => 'WSNsensors_form_ajax',
      'wrapper' => 'WSNsensors-form-wrapper',
    ),
  );

  $form['group1']['nodes_nid_old'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($node->nodes_nid) ? $node->nodes_nid : NULL,
  );

  if (isset($node->nodes_nid)) {
    $nodes_nid = isset($form_state['values']['nodes_nid']) ? $form_state['values']['nodes_nid'] : $node->nodes_nid;
  }
  else {
    drupal_set_message(t('Please add a nodes to the system before trying to add a sensors.'), 'error');
    $nodes_nid = NULL;
  }
  
  $form['title'] = array(
    '#type' => 'textfield',
    //'#title' => check_plain($type->title_label),
    '#title' => 'Sensor ID',
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => $info['title']['weight'],
  );
  
  $form['group2'] = array(
    '#type' => 'fieldset',
    '#title' => 'Sensor Detail',
    '#theme' => 'WSN_form_group',
    '#weight' => $info['group3']['weight'],
  );
  
  $form['group2']['sensorModel'] = array(
    '#type' => 'textfield',
    '#title' => t('Sensor Model'),
    '#size' => 50,
    '#default_value' => isset($node->sensorModel) ? $node->sensorModel : NULL,
  );
  
  $unit_list = WSN_attributes_bydomain('Unit');
  $form['group2']['unit'] = array(
    '#type' => 'select',
    '#title' => t('Sensor Unit'),
    '#default_value' => $node->unit,
    '#options' => $unit_list['values'],
  );
  
  $medium_list = WSN_attributes_bydomain('Medium');
  $form['group2']['medium'] = array(
    '#type' => 'select',
    '#title' => t('Sense Medium'),
    '#default_value' => $node->medium,
    '#options' => $medium_list['values'],
  );

  $form['group3'] = array(
    '#type' => 'fieldset',
    '#title' => 'Sensor Info',
    '#theme' => 'WSN_form_group',
    '#weight' => $info['group3']['weight'],
  );
  $sensorCategory_list = WSN_attributes_bydomain('Sensor Category');
  $form['group3']['sensorCategory'] = array(
    '#type' => 'select',
    '#title' => t('Sensor Category'),
    '#default_value' => $node->sensorCategory,
    '#options' => $sensorCategory_list['values'],
    '#prefix' => '<tr><tr><td>',
    '#suffix' => '</td>',
  );
  $sensorStatus_list = WSN_attributes_bydomain('Sensor Status');
  $form['group3']['sensorStatus'] = array(
    '#type' => 'select',
    '#disabled'=> TRUE,
    '#title' => t('Sensor Status'),
    '#default_value' => $node->sensorStatus,
    '#options' => $sensorStatus_list['values'],
    '#prefix' => '<td>',
    '#suffix' => '</td>',
  );
  $sensorError_list = WSN_attributes_bydomain('Sensor Error');
  $form['group3']['sensorError'] = array(
    '#type' => 'select',
    '#disabled'=> TRUE,
    '#title' => t('Sensor Error'),
    '#default_value' => $node->sensorError,
    '#options' => $sensorError_list['values'],
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></tr>',
  );
  
  $form['group3']['forecastE'] = array(
    '#type' => 'select',
    '#title' => t('Forecast Enable'),
    '#options' => array(
          0 => t('No'),
          1 => t('Yes'),
       ),
    '#prefix' => '<tr><td>',
    '#suffix' => '</td></tr>',
    //'#description' => t('Set Yes to enable Forecast.'),
  );
  $form['group4'] = array(
    '#type' => 'fieldset',
    '#title' => 'Sensor Characteristic',
    '#theme' => 'WSN_form_group',
    '#weight' => $info['group4']['weight'],
  );
  $form['group4']['minOpRa'] = array(
    '#type' => 'textfield',
    '#title' => t('Min Operating Range'),
    '#size' => 20,
    '#default_value' => isset($node->minOpRa) ? $node->minOpRa : NULL,
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>',
    );
  $form['group4']['maxOpRa'] = array(
    '#type' => 'textfield',
    '#title' => t('Max Operating Range'),
    '#size' => 20,
    '#default_value' => isset($node->maxOpRa) ? $node->maxOpRa : NULL,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>',
    );
  $form['group4']['polya0'] = array(
    '#type' => 'textfield',
    '#title' => t('a0'),
    '#size' => 15,
    '#default_value' => isset($node->polya0) ? $node->polya0 : NULL,
    '#prefix' => '<tr><tr><td>',
    '#suffix' => '</td>',
    );
  $form['group4']['polya1'] = array(
    '#type' => 'textfield',
    '#title' => t('a1x'),
    '#size' => 15,
    '#default_value' => isset($node->polya1) ? $node->polya1 : NULL,
    '#prefix' => '<td>',
    '#suffix' => '</td>',
    );
  $form['group4']['polya2'] = array(
    '#type' => 'textfield',
    '#title' => t('a2x^2'),
    '#size' => 15,
    '#default_value' => isset($node->polya2) ? $node->polya2 : NULL,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></tr>',
    );
  $form['group5'] = array(
    '#type' => 'fieldset',
    '#theme' => 'WSN_form_group',
    '#title' => 'Parsing Specific Field',
    '#weight' => $info['group5']['weight'],
  );
  $form['group5']['orderBy'] = array(
    '#type' => 'textfield',
    '#title' => t('Order in Node'),
    '#size' => 20,
    '#default_value' => isset($node->orderBy) ? $node->orderBy : NULL,
  );
  $form['group5']['iCode'] = array(
    '#type' => 'textfield',
    '#title' => t('Identifier in Node'),
    '#size' => 20,
    '#default_value' => isset($node->iCode) ? $node->iCode : NULL,
  );
  
  $form['group6'] = array(
    '#type' => 'fieldset',
    '#title' => 'Notification Centre',
    '#theme' => 'WSN_form_group',
    '#weight' => $info['group6']['weight'],
  );
  $form['group6']['notificationE'] = array(
    '#type' => 'select',
    '#title' => t('Enable Notification'),
    '#options' => array(
          0 => t('No'),
          1 => t('Yes'),
       ),
    '#prefix' => '<tr>',
    '#suffix' => '</tr>',
  );
  $opCondition_list = WSN_attributes_bydomain('Operation Condition');
  $form['group6']['opCondition'] = array(
    '#type' => 'select',
    '#title' => t('Operation Condition'),
    '#default_value' => $node->opCondition,
    '#options' => $opCondition_list['values'],
    //'#weight' => 5,
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>',
  );
  $form['group6']['criteria'] = array(
    '#type' => 'textfield',
    '#title' => t('Criteria'),
    '#size' => 10,
    //'#weight' => 6,
    '#default_value' => isset($node->criteria) ? $node->criteria : NULL,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>',
    );
  $form['group6']['receiverNum'] = array(
    '#type' => 'textfield',
    '#title' => t('Receiver Number'),
    '#size' => 20,
    //'#weight' => 10,
    '#default_value' => isset($node->receiverNum) ? $node->receiverNum : NULL,
    '#prefix' => '<tr><td>',
    '#suffix' => '</td></tr>',
    );
  $form['group6']['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    //'#weight' => 11,
    '#size' => 200,
    '#default_value' => isset($node->message) ? $node->message : NULL,
    '#prefix' => '<tr><td>',
    '#suffix' => '</td></tr>',
    );

  // Check to see if the body field is still there, if so, display it.
  $body = field_get_items('WSNsensors', $node, 'body');
  if ($body) {
    $form['body_field'] = $body;
  }

  $form['title_old'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($node->title_old) ? $node->title_old : NULL,
  );

  return $form;
}

function WSNsensors_form_ajax(&$form, &$form_state) {
  return $form;
}

/**
 * Implements hook_insert().
 */
function WSNsensors_insert($node) {
  _WSNsensors_beforesave($node);

//  $sit_result = db_select('node', 'n')
//    ->fields('n', array('title'))
//    ->condition('n.type', 'WSNsites')
//    ->condition('n.nid', $node->sites_nid)
//    ->execute();
//  $sites = $sit_result->fetchObject();

//  $per_result = db_select('node', 'n')
//    ->fields('n', array('title'))
//    ->condition('n.type', 'WSNperson')
//    ->condition('n.nid', $node->manager_nid)
//    ->execute();
//  $manager = $per_result->fetchObject();
//  if (!$manager) {
//    $manager = new stdClass();
//    $manager->title = '';
//  }
//
//  $assigned = node_load($node->assigned_nid);
//  if (!$assigned) {
//    $assigned = new stdClass();
//    $assigned->title = '';
//  }

  db_insert('WSNsensors')
    ->fields(array(
      'vid' => $node->vid,
      'nid' => $node->nid,
      'sites_nid' => $node->sites_nid,
      'sites_title' => $node->sites_title,
      
      'nodes_nid' => $node->nodes_nid,
      'nodes_title' => $node->nodes_title,
      
      'forecastE' => $node->forecastE,
      
      'sensorCategory' => $node->sensorCategory,
      'sensorStatus' => $node->sensorStatus,
      'sensorError' => $node->sensorError,
      
      'sensorModel' => $node->sensorModel,
      'unit' => $node->unit,
      'medium' => $node->medium,
      
      'minOpRa' => $node->minOpRa,
      'maxOpRa' => $node->maxOpRa,
      'polya0' => $node->polya0,
      'polya1' => $node->polya1,
      'polya2' => $node->polya2,
      
      'orderBy' => $node->orderBy,
      'iCode' => $node->iCode,
      
      'notificationE' => $node->notificationE,
      'opCondition' => $node->opCondition,
      'criteria' => $node->criteria,
      'message' => $node->message,
      'receiverNum' => $node->receiverNum,
      ))
    ->execute();
}

/**
 * Implements hook_update().
 */
function WSNsensors_update($node) {
  _WSNsensors_beforesave($node);
  
  $sit_query = db_select('node', 'n');
  $sit_query->join('WSNsites', 'sor', 'n.vid = sor.vid');
  
  // This code needs to run whether or not revisions are being used
  $sit_result = $sit_query
    ->fields('n', array('title'))
    ->condition('n.type', 'WSNsites')
    ->condition('n.nid', $node->sites_nid)
    ->execute();
  
  $s = $sit_result->fetchObject();
  $node->sites_title = $s->title;

  $nod_query = db_select('node', 'n');
  $nod_query->join('WSNnodes', 'spa', 'n.vid = spa.vid');
  $nod_result = $nod_query
    ->fields('n', array('title'))
    ->condition('n.type', 'WSNnodes')
    ->condition('n.nid', $node->nodes_nid)
    ->execute();

  $p = $nod_result->fetchObject();
  $node->nodes_title = $p->title;

  if ($node->nodes_nid != $node->nodes_nid_old) {
    module_invoke_all('WSNsensors_change_hierarchy', $node->nid, $node->sites_nid, $node->sites_title, $node->nodes_nid, $node->nodes_title);
  }
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    WSNsensors_insert($node);
  }
  else {
    _WSNsensors_beforesave($node);

  
  // If the sensors has been moved to a different sites, all nodes that reference the sensors should be updated.
//  if ($node->sites_nid != $node->sites_nid_old) {
//    module_invoke_all('WSNsensors_change_hierarchy', $node->nid, $node->sites_nid, $sites->title);
//  }
//
//  // If this is a new node or we're adding a new revision,
//  if ($node->revision) {
//    WSNsensors_insert($node);
//  }
//  else {
//    $per_result = db_select('node', 'n')
//      ->fields('n', array('title'))
//      ->condition('n.type', 'WSNperson')
//      ->condition('n.nid', $node->manager_nid)
//      ->execute();
//    $manager = $per_result->fetchObject();
//    if (!$manager) {
//      $manger = new stdClass();
//      $manager->title = '';
//    }
//
//    $assigned = node_load($node->assigned_nid);
//    if (!$assigned) {
//      $assigned = new stdClass();
//      $assigned->title = '';
//    }

    db_update('WSNsensors')
      ->fields(array(
        'nid' => $node->nid,
        'sites_nid' => $node->sites_nid,
        'sites_title' => $node->sites_title,
        'nodes_nid' => $node->nodes_nid,
        'nodes_title' => $node->nodes_title,
        'sensorModel' => $node->sensorModel,
        'sensorCategory' => $node->sensorCategory,
        'sensorStatus' => $node->sensorStatus,
        'sensorError' => $node->sensorError,
        'forecastE' => $node->forecastE,
        'unit' => $node->unit,
        'medium' => $node->medium,

        'minOpRa' => $node->minOpRa,
        'maxOpRa' => $node->maxOpRa,
        'polya0' => $node->polya0,
        'polya1' => $node->polya1,
        'polya2' => $node->polya2,

        'orderBy' => $node->orderBy,
        'iCode' => $node->iCode,
        
      'notificationE' => $node->notificationE,
      'opCondition' => $node->opCondition,
      'criteria' => $node->criteria,
      'message' => $node->message,
      'receiverNum' => $node->receiverNum,
        
        ))
      ->condition('vid', $node->vid)
      ->execute();

     //if (($node->title != $node->title_old) || ($node->stepno != $node->stepno_old)) {
     if (($node->title != $node->title_old)) {
      module_invoke_all('WSNsensors_change', $node->nid, $node->title);
    }
  }
}

/**
 * Prepare node data before saving it to the database.
 */
function _WSNsensors_beforesave(&$node) {
  $sit_query = db_select('node', 'n');
  $sit_query->join('WSNsites', 'sor', 'n.vid = sor.vid');
  $sit_result = $sit_query
    ->fields('n', array('title'))
    ->condition('n.type', 'WSNsites')
    ->condition('n.nid', $node->sites_nid)
    ->execute();

  $s = $sit_result->fetchObject();
  $node->sites_title = $s->title;

  $pro_query = db_select('node', 'n');
  $pro_query->join('WSNnodes', 'spr', 'n.vid = spr.vid');
  $pro_result = $pro_query
    ->fields('n', array('title'))
    ->fields('spr', array('sites_title'))
    ->condition('n.type', 'WSNnodes')
    ->condition('n.nid', $node->nodes_nid)
    ->execute();

  $p = $pro_result->fetchObject();
  $node->nodes_title = $p->title;

//  $assigned = node_load($node->assigned_nid);
//  $node->assigned_title = isset($assigned->title) ? $assigned->title : NULL;
//
//  // Allow use of comma when inputting numerical values - str_replace with period decimal
//  $node->duration = floatval(str_replace(',', '.', $node->duration));
//  $node->price = floatval(str_replace(',', '.', $node->price));
//  
//  // Allow use of comma when inputting numerical values - str_replace with period decimal
//  $node->duration = str_replace(',', '.', $node->duration);
//  $node->price = str_replace(',', '.', $node->price);
//  if (!is_numeric($node->duration)) {
//    $node->duration = 0;
//  }
//  if (!is_numeric($node->price)) {
//    $node->price = 0;
//  }
//
//  if (is_array($node->datebegin)) {
//      $node->datebegin = _WSN_date_to_gmtimestamp($node->datebegin);
//  }
//  elseif (is_string($node->datebegin)) {
//      $node->datebegin = strtotime($node->datebegin);
//  }
//
//  if (is_array($node->dateend)) {
//      $node->dateend = _WSN_date_to_gmtimestamp($node->dateend);
//  }
//  elseif (is_string($node->dateend)) {
//      $node->dateend = strtotime($node->dateend);
//  }
}

/**
 * Implements hook_node_prepare().
 */
function WSNsensors_node_prepare($node) {
  if (!isset($node->nid)) {
    $sensorCategory_list = WSN_attributes_bydomain('Sensor Category');
    $node->sensorCategory = $sensorCategory_list['default'];

    $sensorStatus_list = WSN_attributes_bydomain('Sensor Status');
    $node->sensorStatus = $sensorStatus_list['default'];

    $sensorError_list = WSN_attributes_bydomain('Sensor Error');
    $node->sensorError = $sensorError_list['default'];

    $unit_list = WSN_attributes_bydomain('Unit');
    $node->unit = $unit_list['default'];

    $medium_list = WSN_attributes_bydomain('Medium');
    $node->medium = $medium_list['default'];
    
    $opCondition_list = WSN_attributes_bydomain('Operation Condition');
    $node->opCondition = $opCondition_list['default'];
    
  }
}

/**
 * Implements hook_node_revision_delete().
 */
function WSNsensors_node_revision_delete($node) {
  // Notice that we're matching a single revision based on the node's vid.
  db_delete('WSNsensors')
    ->condition('vid', $node->vid)
    ->execute();
}

/**
 * Implements hook_delete().
 */
function WSNsensors_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  db_delete('WSNsensors')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_load().
 */
function WSNsensors_load($nodes) {
  foreach ($nodes as $nid => &$node) {
    $result = db_select('WSNsensors', 'spa')
      ->fields('spa')
      ->condition('vid', $node->vid)
      ->execute();
    $record = $result->fetchAssoc();

    foreach ($record as $key => $value) {
      $node->$key = $value;
    }
    $node->title_old = $node->title;
  }
}
/**
 * Implements hook_validate().
 */
function WSNsensors_validate(&$node) {
//  if (($node->nid == $node->parent_nid) && $node->parent_nid) {
//    form_set_error('parent_nid', t('Impossible to assign itself as parent.'));
//  }
}

/**
 * Implements hook_view().
 */
function WSNsensors_view($node, $view_mode) {
  $breadcrumb = array();
  $breadcrumb[] = l(t('WSN'), 'WSN');
  $breadcrumb[] = l(t('Sensors'), 'WSN/sensors');
  drupal_set_breadcrumb($breadcrumb);
  return theme('WSNsensors_view', array('node' => $node, 'view_mode' => $view_mode));
}

/**
 * Determines whether the task tab of a project is visible.
 */
function _WSNsensors_tasks_access($node=NULL) {
  if ($node == NULL) return FALSE;
  if ($node->type == 'WSNsensors' && user_access('WSN Sensors: access')) return TRUE;
  return FALSE;
}

/**
 * Implements hook_views_api().
 */
function WSNsensors_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'WSNsensors'),
  );
}

/**
 * Admin settings form for WSNsensors module
 */
function WSNsensors_admin_settings() {
  $form = array();

//  $form['WSNsensors_billable_default'] = array(
//    '#type' => 'checkbox',
//    '#title' => t('Default Value for billable field.'),
//    '#default_value' => variable_get('WSNsensors_billable_default', FALSE),
//    '#description' => t('When checked, WSN will set the sensors to billable by default'),
//    '#size' => 5,
//  );

  return system_settings_form($form);
}

/**
 * Handler to automatically add sensors to an invoice.
 */
//function WSNsensors_WSNinvoice_auto_add($node, $invoice_nid = NULL) {
//  if (!module_exists('WSNinvoice')) {
//    drupal_set_message(t('This function should only be called from within WSN Invoice'));
//    return;
//  }
//  elseif ($node->billed) {
//    drupal_set_message(t('This sensors has already been billed!'));
//    return;
//  }
//  elseif (!$node->billable) {
//    drupal_set_message(t('This sensors is marked unbillable!'));
//    return;
//  }
//  else {
//    global $user;
//
//    if (!$invoice_nid) {
//
//      $new_invoice = new StdClass;
//
//      // Code copied with edits from node form
//      $new_invoice->requestdate = time();
//      $new_invoice->duedate = $new_invoice->requestdate + (variable_get('WSNinvoice_payment_days', 30) * 86400);
//      $new_invoice->number = WSNinvoice_get_invoice_number($new_invoice->requestdate);
//
//      $new_invoice->title = $node->title;
//      $new_invoice->uid = $user->uid;
//      $new_invoice->type = 'WSNinvoice';
//      // $new_invoice->reference
//      $new_invoice->sites_nid = $node->sites_nid;
//      $new_invoice->sites_title = $node->sites_title;
//      $new_invoice->sensors_nid = $node->nid;
//      $new_invoice->sensors_title = $node->title;
//      // $new_invoice->amount
//      // $new_invoice->tax
//      // $new_invoice->total
//      // $new_invoice->totalcustomercurr
//      // $new_invoice->taxexempt
//      $new_invoice->src_nid = $node->nid;
//      $new_invoice->src_vid = $node->vid;
//
//      node_save($new_invoice);
//      $invoice_nid = $new_invoice->nid;
//    }
//    else {
//      $new_invoice = node_load($invoice_nid);
//    }
//
//    $rate_array = array('pricemode_used' => '', 'rate_to_use' => 0);
//
//    $rate_array = WSNinvoice_get_rate($node);
//
//    $count = count($new_invoice->items);
//
//    $new_invoice->items[$count]->description = WSNinvoice_get_item_desc($rate_array, $node);
//
//    $new_invoice->items[$count]->amount = WSNinvoice_get_item_amount($rate_array, $node);
//
//    // Tax percent simply uses default at the moment
//    $new_invoice->items[$count]->tax1percent = variable_get('WSN_tax1_percent', 20);
//    // $new_invoice_item->items[$count]->tax1
//    // $new_invoice_item->items[$count]->total
//    $new_invoice->items[$count]->src_nid = $node->nid;
//    $new_invoice->items[$count]->src_vid = $node->vid;
//
//    WSN_taxation($new_invoice->items[$count]);
//    WSNinvoice_update($new_invoice);
//  }
//
//  // Mark sensors as billed.
//  db_query("UPDATE {WSNsensors} SET billed=%d WHERE vid=%d", 1, $node->vid);
//
//  return $invoice_nid;
//}

/**
 * Implements hook_token_list().
 */
function WSNsensors_token_list($type='all') {
  $tokens = array();
  if (($type == 'node') || ($type == 'all')) {
    $tokens['node']['WSNsensors-sensorStatus'] = t('WSN Sensors: Sensor Status.');
    $tokens['node']['WSNsensors-sensorCategory'] = t('WSN Sensors: Sensor Category.');
    $tokens['node']['WSNsensors-sensorError'] = t('WSN Sensors: Sensor error.');

    $tokens['node']['WSNsensors-unit'] = t('WSN Sensors: Unit.');
    $tokens['node']['WSNsensors-medium'] = t('WSN Sensors: Medium.');
    $tokens['node']['WSNsensors-sensorModel'] = t('WSN Sensors: Sensor Model');

    $tokens['node']['WSNsensors-minOpRa'] = t('WSN Sensors: Minimum Operating Range.');
    $tokens['node']['WSNsensors-maxOpRa'] = t('WSN Sensors: Maximum Operating Range.');
    $tokens['node']['WSNsensors-polya0'] = t('WSN Sensors: Polya0.');
    $tokens['node']['WSNsensors-polya1'] = t('WSN Sensors: Polya1.');
    $tokens['node']['WSNsensors-polya2'] = t('WSN Sensors: Polya2.');

    $tokens['node']['WSNsensors-forecastE'] = t('WSN Sensors: forecastE.');
    $tokens['node']['WSNsensors-orderBy'] = t('WSN Sensors: Order By.');
    $tokens['node']['WSNsensors-iCode'] = t('WSN Sensors: Identifier Code.');
    
    $tokens['node']['WSNsensors-notificationE'] = t('WSN Sensors: Notification Enable.');
    $tokens['node']['WSNsensors-opCondition'] = t('WSN Sensors: Operation Condition.');
    $tokens['node']['WSNsensors-criteria'] = t('WSN Sensors: Criteria.');
    $tokens['node']['WSNsensors-message'] = t('WSN Sensors: Message.');
    $tokens['node']['WSNsensors-receiverNum'] = t('WSN Sensors: Receiver Number.');
    
      $tokens['node']['WSNsensors-sites-nid'] = t('WSN sensors: Sites Node ID.');
      $tokens['node']['WSNsensors-sites-title'] = t('WSN sensors: Sites Title.');
      $tokens['node']['WSNsensors-nodes-nid'] = t('WSN sensors: Nodes Node ID.');
      $tokens['node']['WSNsensors-nodes-title'] = t('WSN sensors: Nodes Title.');
  
  }
  return $tokens;
}

/**
 * Implements hook_token_values().
 */
function WSNsensors_token_values($type, $object = NULL) {
  $values = array();
  $node = $object;
  if ((($type == 'node') || ($type == 'all')) && ($node->type === 'WSNsensors')) {
    $values['WSNsensors-sensorStatus'] = $node->sensorStatus;
    $values['WSNsensors-sensorError'] = $node->sensorError;
    $values['WSNsensors-sensorCategory'] = $node->sensorCategory;
    
    $values['WSNsensors-sensorModel'] = $node->sensorModel;
    
    $values['WSNsensors-unit'] = $node->unit;
    $values['WSNsensors-medium'] = $node->medium;
    
    $values['WSNsensors-orderBy'] = $node->orderBy;
    $values['WSNsensors-iCode'] = $node->iCode;
    $values['WSNsensors-forecastE'] = $node->forecastE;
    
    $values['WSNsensors-minOpRa'] = $node->minOpRa;
    $values['WSNsensors-maxOpRa'] = $node->maxOpRa;
    $values['WSNsensors-polya0'] = $node->polya0;
    $values['WSNsensors-polya1'] = $node->polya1;
    $values['WSNsensors-polya2'] = $node->polya2;
      
    $values['WSNsensors-sites-nid'] = $node->sites_nid;
    $values['WSNsensors-sites-title'] = $node->sites_title;
    
    $values['WSNsensors-nodes-nid'] = $node->nodes_nid;
    $values['WSNsensors-nodes-title'] = $node->nodes_title;
    
    $values['WSNsensors-notificationE'] = $node->notificationE;
    $values['WSNsensors-opCondition'] = $node->opCondition;
    $values['WSNsensors-criteria'] = $node->criteria;
    $values['WSNsensors-message'] = $node->message;
    $values['WSNsensors-receiverNum'] = $node->receiverNum;
  }
  return $values;
}

/**
 * Implements  hook_node_access_records().
 */
function WSNsensors_node_access_records($node) {
  if (empty($node->status)) {
    // Lets Drupal take care of permission to unpublished nodes.
    return array();
  }
  $type = is_string($node) ? $node : $node->type;
  $grants = array();
  if ($type == 'WSNsensors') {
    // WSN sensors: view all
    $grants[] = array(
      'realm' => 'WSNsensors_view_all',
      'gid' => 0,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'error' => 0,
    );
    // WSN sensors: view own
    $grants[] = array(
      'realm' => 'WSNsensors_view_own',
      'gid' => $node->uid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'error' => 0,
    );
    // WSN sensors: view of user sites
    if (isset($node->sites_nid) && !empty($node->sites_nid)) {
      $grants[] = array(
        'realm' => 'WSNsensors_view_if_user_sites',
        'gid' => $node->sites_nid,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'error' => 0,
      );
    }

    // WSN sensors: edit all
    $grants[] = array(
      'realm' => 'WSNsensors_update_all',
      'gid' => 0,
      'grant_view' => 0,
      'grant_update' => 1,
      'grant_delete' => 0,
      'error' => 0,
    );
    // WSN sensors: edit own
    $grants[] = array(
      'realm' => 'WSNsensors_update_own',
      'gid' => $node->uid,
      'grant_view' => 0,
      'grant_update' => 1,
      'grant_delete' => 0,
      'error' => 0,
    );
    // WSN sensors: edit of user sites
    if (isset($node->sites_nid) && !empty($node->sites_nid)) {
      $grants[] = array(
        'realm' => 'WSNsensors_update_if_user_sites',
        'gid' => $node->sites_nid,
        'grant_view' => 0,
        'grant_update' => 1,
        'grant_delete' => 0,
        'error' => 0,
      );
    }
//    // WSN sensors: edit if sensors manager
//    if (isset($node->manager_nid) && !empty($node->manager_nid)) {
//      $grants[] = array(
//        'realm' => 'WSNsensors_update_if_manager',
//        'gid' => $node->manager_nid,
//        'grant_view' => 0,
//        'grant_update' => 1,
//        'grant_delete' => 0,
//        'error' => 0,
//      );
//    }
//    // WSN sensors: edit if assigned to sensors
//    if (isset($node->assigned_nid) && !empty($node->assigned_nid)) {
//      $grants[] = array(
//        'realm' => 'WSNsensors_update_if_assigned',
//        'gid' => $node->assigned_nid,
//        'grant_view' => 0,
//        'grant_update' => 1,
//        'grant_delete' => 0,
//        'error' => 0,
//      );
//    }
    // WSN sensors: delete all
    $grants[] = array(
      'realm' => 'WSNsensors_delete_all',
      'gid' => 0,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 1,
      'error' => 0,
    );
    // WSN sensors: delete own
    $grants[] = array(
      'realm' => 'WSNsensors_delete_own',
      'gid' => $node->uid,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 1,
      'error' => 0,
    );
    // WSN sensors: delete of user sites
    if (isset($node->sites_nid) && !empty($node->sites_nid)) {
      $grants[] = array(
        'realm' => 'WSNsensors_delete_if_user_sites',
        'gid' => $node->sites_nid,
        'grant_view' => 0,
        'grant_update' => 0,
        'grant_delete' => 1,
        'error' => 0,
      );
    }
//    // WSN sensors: delete if sensors manager
//    if (isset($node->manager_nid) && !empty($node->manager_nid)) {
//      $grants[] = array(
//        'realm' => 'WSNsensors_delete_if_manager',
//        'gid' => $node->manager_nid,
//        'grant_view' => 0,
//        'grant_update' => 0,
//        'grant_delete' => 1,
//        'error' => 0,
//      );
//    }
//    // WSN sensors: delete if assigned to sensors
//    if (isset($node->assigned_nid) && !empty($node->assigned_nid)) {
//      $grants[] = array(
//        'realm' => 'WSNsensors_delete_if_assigned',
//        'gid' => $node->assigned_nid,
//        'grant_view' => 0,
//        'grant_update' => 0,
//        'grant_delete' => 1,
//        'error' => 0,
//      );
//    }
  }
  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function WSNsensors_node_grants($account, $op) {
//  if (module_exists('WSNperson')) {
//    _WSNperson_user_load($account);
//    if (!empty($account->WSNteam) AND is_array($account->WSNteam)) {
//      $assigned_nids = $account->WSNteam;
//    }
//    if (isset($account->WSNperson_nid) AND !empty($account->WSNperson_nid)) {
//      $assigned_nids[] = $account->WSNperson_nid;
//    }
//  }
  $grants = array();
  switch ($op) {
    case 'view':
      if (user_access('WSN sensors: view all', $account)) {
        $grants['WSNsensors_view_all'] = array(0);
      }
      if (user_access('WSN sensors: view own', $account)) {
        $grants['WSNsensors_view_own'] = array($account->uid);
      }
      if (user_access('WSN sensors: view of user sites', $account) AND !empty($account->WSNsites_nid)) {
        $grants['WSNsensors_view_if_user_sites'] = array($account->WSNsites_nid);
      }
//      if (isset($account->WSNperson_nid)) {
//        if (user_access('WSN sensors: view if sensors manager', $account)) {
//          $grants['WSNsensors_view_if_manager'] = array($account->WSNperson_nid);
//        }
//        if (user_access('WSN sensors: view if assigned to sensors', $account)) {
//          $grants['WSNsensors_view_if_assigned'] = $assigned_nids;
//        }
//      }
      break;

    case 'update':
      if (user_access('WSN sensors: edit all', $account)) {
        $grants['WSNsensors_update_all'] = array(0);
      }
      if (user_access('WSN sensors: edit own', $account)) {
        $grants['WSNsensors_update_own'] = array($account->uid);
      }
      if (user_access('WSN sensors: edit of user sites', $account) AND !empty($account->WSNsites_nid)) {
        $grants['WSNsensors_update_if_user_sites'] = array($account->WSNsites_nid);
      }
//      if (isset($account->WSNperson_nid)) {
//        if (user_access('WSN sensors: edit if sensors manager', $account)) {
//          $grants['WSNsensors_update_if_manager'] = array($account->WSNperson_nid);
//        }
//        if (user_access('WSN sensors: edit if assigned to sensors', $account)) {
//          $grants['WSNsensors_update_if_assigned'] = $assigned_nids;
//        }
//      }
      break;

    case 'delete':
      if (user_access('WSN sensors: delete all', $account)) {
        $grants['WSNsensors_delete_all'] = array(0);
      }
      if (user_access('WSN sensors: delete own', $account)) {
        $grants['WSNsensors_delete_own'] = array($account->uid);
      }
      if (user_access('WSN sensors: delete of user sites', $account) AND !empty($account->WSNsites_nid)) {
        $grants['WSNsensors_delete_if_user_sites'] = array($account->WSNsites_nid);
      }
//      if (isset($account->WSNperson_nid)) {
//        if (user_access('WSN sensors: delete if sensors manager', $account)) {
//          $grants['WSNsensors_delete_if_manager'] = array($account->WSNperson_nid);
//        }
//        if (user_access('WSN sensors: delete if assigned to sensors', $account)) {
//          $grants['WSNsensors_delete_if_assigned'] = $assigned_nids;
//        }
//      }
      break;
  }
  return $grants;
}

/**
 * Implements hook_WSN_dashboard_links().
 */
function WSNsensors_WSN_dashboard_links($type) {
  $links = array();
  if ($type == 'page' || $type == 'block') {
    $links[] = array(
      'theme' => 'WSN_dashboard_link',
      'title' => t('Sensors'),
      'icon' => 'WSNsensors',
      'path' => 'WSN/sensors',
      'params' => array(),
      'node_type' => 'WSNsensors',
      'add_type' => 'WSNsensors',
      'map' => array(),
      'weight' => 4,
    );
  }
  return $links;
}


