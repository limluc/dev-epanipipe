<?php

/**
 * @file
 */

/**
 * Implements hook_help().
 */
function WSNnodes_help($path, $arg) {
  $o = '';

  switch ($path) {
    case "admin/help#WSNnodes":
      $o = '<p>' . t("Provides Node support for WSN") . '</p>';
      break;
  }

  return $o;
}

/**
 * Implements hook_permission().
 */
function WSNnodes_permission() {
  return array(
    'WSN Node: access' => array(
      'title' => t('Access WSN Node'),
    ),
    'WSN Node: add' => array(
      'title' => t('Add WSN Nodes'),
    ),
    'WSN Node: delete all' => array(
      'title' => t('Delete Any WSN Node'),
    ),
    'WSN Node: delete own' => array(
      'title' => t('Delete Authored WSN Nodes'),
    ),
    'WSN Node: delete of user sites' => array(
      'title' => t('Delete WSN Nodes in own sites'),
    ),
    'WSN Node: edit all' => array(
      'title' => t('Edit Any WSN Node'),
    ),
    'WSN Node: edit own' => array(
      'title' => t('Edit Authored WSN Nodes'),
    ),
    'WSN Node: edit of user sites' => array(
      'title' => t('Edit WSN Node in own sites'),
    ),
    'WSN Node: view all' => array(
      'title' => t('View Any WSN Node'),
    ),
    'WSN Node: view own' => array(
      'title' => t('View Authored WSN Node'),
    ),
    'WSN Node: view of user sites' => array(
      'title' => t('View WSN Node in own sites'),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function WSNnodes_node_access($node, $op, $account = NULL) {
  $type = is_string($node) ? $node : $node->type;
  if ($type == 'WSNnodes') {
    // If no account is specified, assume that the check is against the current logged in user
    if (is_null($account)) {
      global $user;
      $account = $user;
    }
    if ($op == 'create' AND user_access('WSN Node: add', $account)) {
      return NODE_ACCESS_ALLOW;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_menu().
 */
function WSNnodes_menu() {
  $items = array();

  $items['WSN/sites_nodes_js/%'] = array(
    'title' => 'Nodes',
    'page callback' => '_WSNnodes_sites_nodes_js',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'file' => 'WSNnodes.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/WSN/Node'] = array(
    'title' => 'WSN Node',
    'description' => 'Administer WSN Node.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('WSNnodes_admin_settings'),
    'access arguments' => array('WSN: access administration pages'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function WSNnodes_theme() {
  return array(
    'WSNnodes_view' => array(
      'file'      => 'WSNnodes.theme.inc',
      'variables' => array('node', 'view_mode'),
    ),
  );
}

/**
 * Implements hook_node_info().
 */
function WSNnodes_node_info() {
  return array(
    'WSNnodes' => array(
      'name' => t('Node'),
      'base' => 'WSNnodes',
      'description' => t("Node of WSN"),
      'title_label' => t("Title"),
      'body_label' => t("Description"),
    )
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function WSNnodes_field_extra_fields() {
  $extra['node']['WSNnodes'] = array(
    'form' => array(
      'group1' => array(
        'label' => 'Sites',
        'weight' => -20,
      ),
      'group2' => array(
        'label' => 'Monitoring Category',
        'weight' => -19,
      ),
      'group3' => array(
        'label' => 'Data Input Identifier',
        'weight' => -18,
      ),
      'group4' => array(
        'label' => 'Node Category / Status / Error',
        'weight' => -16,
      ),
      'group5' => array(
        'label' => 'Delimiter Group',
        'weight' => -17,
      ),
      'group6' => array(
        'label' => 'Notification Centre',
        'weight' => -15,
      ),
    ),
  );
  return $extra;
}

/**
 * Implements hook_field_extra_fields_alter().
 */
function WSNnodes_field_extra_fields_alter(&$info) {
  $info['node']['WSNnodes']['form']['title']['weight'] = -21;
}

/**
 * Implements hook_WSNsites_change().
 */
function WSNnodes_WSNsites_change($sites_nid, $sites_title) {
  db_update('WSNnodes')
    ->fields(array('sites_title' => $sites_title))
    ->condition('sites_nid', $sites_nid)
    ->execute();
}

/**
 * Implements hook_form().
 */
function WSNnodes_form(&$node) {
  $breadcrumb = array();
  $breadcrumb[] = l(t('WSN'), 'WSN');
  $breadcrumb[] = l(t('Nodes'), 'WSN/Nodes');
  drupal_set_breadcrumb($breadcrumb);

//  if (arg(1)=='add') {
//    $node->billable = variable_get('pmproject_billable_default', FALSE);
//  }

  $sit_query = db_select('node', 'n');
  $sit_query->join('WSNsites', 'sor', 'n.vid = sor.vid');
  $sit_query
    ->fields('n', array('nid', 'title'))
    ->condition('n.status', 1)
    ->condition('n.type', 'WSNsites')
    ->addTag('node_access')
    ->orderBy('n.title', 'ASC');

  $type = node_type_get_type($node);
  $info = field_info_extra_fields('node', 'WSNnodes', 'form');

  $form['#attributes']['class'] = 'WSNcomponent_node_form';

  $form['title'] = array(
    '#type' => 'textfield',
    //'#title' => check_plain($type->title_label),
    '#title' => 'Node ID',
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => $info['title']['weight'],
  );

  $form['group1'] = array(
    '#type' => 'fieldset',
    '#title' => 'WSN Tree',
    '#theme' => 'WSN_form_group',
    '#weight' => $info['group1']['weight'],
  );

  $sit_result = $sit_query->execute();
  $sitess = array();
  foreach ($sit_result as $sites) {
    $sitess[$sites->nid] = $sites->title;
    if (!isset($node->sites_nid)) $node->sites_nid = $sites->nid;
  }
  if (!isset($node->sites_nid)) {
    drupal_set_message(t('Please add Site to the system before trying to add a Node.'), 'error');
  }
  $form['group1']['sites_nid'] = array(
    '#type' => 'select',
    '#title' => t('Site'),
    '#options' => $sitess,
    '#default_value' => isset($node->sites_nid) ? $node->sites_nid : NULL,
  );

  $form['group1']['sites_nid_old'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($node->sites_nid) ? $node->sites_nid : NULL,
  );

  $form['group2'] = array(
    '#type' => 'fieldset',
    '#title' => 'Node Details',
    '#theme' => 'WSN_form_group',
    '#weight' => $info['group2']['weight'],
  );

  $wsnTopic_list = WSN_attributes_bydomain('WSN Topic');
  $form['group2']['wsnTopic'] = array(
    '#type' => 'select',
    '#title' => t('WSN Topic'),
    '#default_value' => isset($node->wsnTopic) ? $node->wsnTopic : $wsnTopic_list['default'],
    '#options' => $wsnTopic_list['values'],
  );
  
 $form['group2']['latitude'] = array(
    '#type' => 'textfield',
    '#title' => t('Latitude'),
    '#size' => 15,
    '#weight' => 6,
    '#default_value' => isset($node->latitude) ? $node->latitude : NULL,
  );
  
  $form['group2']['longitude'] = array(
    '#type' => 'textfield',
    '#title' => t('Longitude'),
    '#size' => 15,  
    '#weight' => 7,
    '#default_value' => isset($node->longitude) ? $node->longitude : NULL,
  );
  $form['group3'] = array(
    '#type' => 'fieldset',
    '#title' => 'Node Info',
    '#theme' => 'WSN_form_group',
    '#weight' => $info['group3']['weight'],
  );

  $nodeCategory_list = WSN_attributes_bydomain('Node Category');
  $form['group3']['nodeCategory'] = array(
    '#type' => 'select',
    '#title' => t('Node Category'),
    '#default_value' => isset($node->nodeCategory) ? $node->nodeCategory : $nodeCategory_list['default'],
    '#options' => $nodeCategory_list['values'],
  );

  $nodeStatus_list = WSN_attributes_bydomain('Node Status');
  $form['group3']['nodeStatus'] = array(
    '#type' => 'select',
    //'#disabled' => TRUE,
    '#title' => t('Node Status'),
    '#default_value' => isset($node->nodeStatus) ? $node->nodeStatus : $nodeStatus_list['default'],
    '#options' => $nodeStatus_list['values'],
  );

  $nodeError_list = WSN_attributes_bydomain('Node Error');
  $form['group3']['nodeError'] = array(
    '#type' => 'select',
    '#disabled' => TRUE,
    '#title' => t('Node Error'),
    '#default_value' => isset($node->nodeError) ? $node->nodeError : $nodeError_list['default'],
    '#options' => $nodeError_list['values'],
  );
  
  $form['group4'] = array(
    '#type' => 'fieldset',
    '#title' => 'Node Data Input Detail',
    '#theme' => 'WSN_form_group',
    '#weight' => $info['group4']['weight'],
  );
  $dataInputMethod_list = WSN_attributes_bydomain('Data Input Method');
  $form['group4']['dataInputMethod'] = array(
    '#type' => 'select',
    '#title' => t('Data Input Method'),
    '#default_value' => isset($node->dataInputMethod) ? $node->dataInputMethod : $dataInputMethod_list['default'],
    '#options' => $dataInputMethod_list['values'],
  );

  $dataCompressionTech_list = WSN_attributes_bydomain('Data Compression Technique');
  $form['group4']['dataCompressionTech'] = array(
    '#type' => 'select',
    '#title' => t('Data Compression Technique'),
    '#default_value' => isset($node->dataCompressionTech) ? $node->dataCompressionTech : $dataCompressionTech_list['default'],
    '#options' => $dataCompressionTech_list['values'],
  );

  $form['group4']['inputIdentifier'] = array(
    '#type' => 'textfield',
    '#title' => t('Input Identifier'),
    //'#description' => 'Unique Number / Identifier for Data',    
    '#size' => 50,
    '#default_value' => isset($node->inputIdentifier) ? $node->inputIdentifier : NULL,
  );

  $form['group5'] = array(
    '#type' => 'fieldset',
    '#title' => 'Node Parsing Detail',
    '#theme' => 'WSN_form_group',
    '#weight' => $info['group5']['weight'],
  );
  $form['group5']['sensorDelimiter'] = array(
    '#type' => 'textfield',
    '#title' => t('Sensor Delimiter'),
    '#size' => 20,
    '#default_value' => isset($node->sensorDelimiter) ? $node->sensorDelimiter : NULL,
  );
  $form['group5']['dataDelimiter'] = array(
    '#type' => 'textfield',
    '#title' => t('Data Delimiter'),
    '#size' => 20,
    '#default_value' => isset($node->dataDelimiter) ? $node->dataDelimiter : NULL,
  );
    $form['group5']['timeInterval'] = array(
    '#type' => 'textfield',
    '#title' => t('Time Interval (s)'),
    '#size' => 20,
    '#default_value' => isset($node->timeInterval) ? $node->timeInterval : NULL,
  );
  $form['group5']['readNumOccurence'] = array(
    '#type' => 'textfield',
    '#title' => t('No. Reading Occurence'),
    '#size' => 20,
    '#default_value' => isset($node->readNumOccurence) ? $node->readNumOccurence : NULL,
  );
  $form['group5']['numSensorUnit'] = array(
    '#type' => 'textfield',
    '#title' => t('No. of Sensor Set'),
    '#size' => 20,
    '#default_value' => isset($node->numSensorUnit) ? $node->numSensorUnit : NULL,
  );
  $occOrder_list = WSN_attributes_bydomain('Order Occurence');
  $form['group5']['occOrder'] = array(
    '#type' => 'select',
    '#title' => t('Occurence Order'),
    '#default_value' => isset($node->occOrder) ? $node->occOrder : $occOrder_list['default'],
    '#options' => $occOrder_list['values'],
    );
  
  
  
  
  $form['group6'] = array(
    '#type' => 'fieldset',
    '#title' => 'Notification Centre',
    '#theme' => 'WSN_form_group',
    '#weight' => $info['group6']['weight'],
  );
  $form['group6']['notificationE'] = array(
    '#type' => 'select',
    '#title' => t('Enable Notification'),
    '#options' => array(
          0 => t('No'),
          1 => t('Yes'),
       ),
   '#prefix' => '<tr>',
   '#suffix' => '</tr>',
  );
  $notiRecurrence_list = WSN_attributes_bydomain('Recurrence');
  $form['group6']['notiRecurrence'] = array(
    '#type' => 'select',
    '#title' => t('Notification Recurrence'),
    //'#width' => 30,
    '#default_value' => isset($node->notiRecurrence) ? $node->notiRecurrence : $notiRecurrence_list['default'],
    '#options' => $notiRecurrence_list['values'],
    '#prefix' => '<tr><td>',
    '#suffix' => '</td>',
    );
  $notiValue_list = WSN_attributes_bydomain('Recurrence Day');
  $form['group6']['notiValue'] = array(
    '#type' => 'select',
    '#title' => t('Recurrence Value'),
    //'#width' => 30,
    '#default_value' => isset($node->notiValue) ? $node->notiValue : $notiValue_list['default'],
    '#options' => $notiValue_list['values'],
    '#prefix' => '<td>',
    '#suffix' => '</td>',
    );
  $form['group6']['receiverNum'] = array(
    '#type' => 'textfield',
    '#title' => t('Receiver Number'),
    '#size' => 40,
    '#default_value' => isset($node->receiverNum) ? $node->receiverNum : NULL,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr>',
    );
  $form['group6']['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#size' => 200,
    '#default_value' => isset($node->message) ? $node->message : NULL,
    '#prefix' => '<tr>',
    '#suffix' => '</tr>',
    );
  
  // Check to see if the body field is still there, if so, display it.
  $body = field_get_items('WSNnodes', $node, 'body');
  if ($body) {
    $form['body_field'] = $body;
  }
  $form['title_old'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($node->title_old) ? $node->title_old : NULL,
  );

  return $form;
}

/**
 * Implements hook_insert().
 */
function WSNnodes_insert($node) {
  _WSNnodes_beforesave($node);

  $sit_result = db_select('node', 'n')
    ->fields('n', array('title'))
    ->condition('n.type', 'WSNsites')
    ->condition('n.nid', $node->sites_nid)
    ->execute();
  $sites = $sit_result->fetchObject();

  db_insert('WSNnodes')
    ->fields(array(
      'vid' => $node->vid,
      'nid' => $node->nid,
      'sites_nid' => $node->sites_nid,
      'sites_title' => $sites->title,
      'wsnTopic' => $node->wsnTopic,
            
      'nodeCategory' => $node->nodeCategory,
      'nodeStatus' => $node->nodeStatus,
      'nodeError' => $node->nodeError,
      'longitude' => $node->longitude,
      'latitude' => $node->latitude,
      'inputIdentifier' => $node->inputIdentifier,
      'dataInputMethod' => $node->dataInputMethod,
      'dataCompressionTech' => $node->dataCompressionTech,
      
      'readNumOccurence' => $node->readNumOccurence,
      'numSensorUnit' => $node->numSensorUnit,
      
      'timeInterval' => $node->timeInterval,
      'occOrder' => $node->occOrder,
      
      'sensorDelimiter' => $node->sensorDelimiter,
      'dataDelimiter' => $node->dataDelimiter,
      
      'notificationE' => $node->notificationE,
      'notiRecurrence' => $node->notiRecurrence,
      'notiValue' => $node->notiValue,
      'message' => $node->message,
      'receiverNum' => $node->receiverNum,
    ))
    ->execute();
}

/**
 * Implements hook_update().
 */
function WSNnodes_update($node) {
  _WSNnodes_beforesave($node);

  // This code needs to run whether or not revisions are being used
  $sit_result = db_select('node', 'n')
    ->fields('n', array('title'))
    ->condition('n.type', 'WSNsites')
    ->condition('n.nid', $node->sites_nid)
    ->execute();
  
  $sites = $sit_result->fetchObject();

  // If the Node has been moved to a different sites, all nodes that reference the Node should be updated.
  if ($node->sites_nid != $node->sites_nid_old) {
    module_invoke_all('WSNnodes_change_hierarchy', $node->nid, $node->sites_nid, $sites->title);
  }

  // If this is a new node or we're adding a new revision,
  if ($node->revision) {
    WSNnodes_insert($node);
  }
  else {
      db_update('WSNnodes')
      ->fields(array(
        'nid' => $node->nid,
        
      'sites_nid' => $node->sites_nid,
      'sites_title' => $sites->title,
      'wsnTopic' => $node->wsnTopic,
            
      'nodeCategory' => $node->nodeCategory,
      'nodeStatus' => $node->nodeStatus,
      'nodeError' => $node->nodeError,
      'longitude' => $node->longitude,
      'latitude' => $node->latitude,
      'inputIdentifier' => $node->inputIdentifier,
      'dataInputMethod' => $node->dataInputMethod,
      'dataCompressionTech' => $node->dataCompressionTech,
      
      'readNumOccurence' => $node->readNumOccurence,
      'numSensorUnit' => $node->numSensorUnit,
      'timeInterval' => $node->timeInterval,
      'occOrder' => $node->occOrder,     
      'sensorDelimiter' => $node->sensorDelimiter,
      'dataDelimiter' => $node->dataDelimiter,
        
      'notificationE' => $node->notificationE, 
      'notiRecurrence' => $node->notiRecurrence,
      'notiValue' => $node->notiValue,
      'message' => $node->message,
      'receiverNum' => $node->receiverNum,
      ))
      ->condition('vid', $node->vid)
      ->execute();

    if ($node->title != $node->title_old) {
      module_invoke_all('WSNnodes_change', $node->nid, $node->title);
    }
  }
}

/**
 * Prepare node data before saving it to the database.
 */
function _WSNnodes_beforesave(&$node) {
}

/**
 * Implements hook_node_prepare().
 */
function WSNnodes_node_prepare($node) {
  if (!isset($node->nid)) {
    $nodeCategory_list = WSN_attributes_bydomain('Node Category');
    $node->nodeCategory = $nodeCategory_list['default'];

    $nodeStatus_list = WSN_attributes_bydomain('Node Status');
    $node->nodeStatus = $nodeStatus_list['default'];

    $nodeError_list = WSN_attributes_bydomain('Node Error');
    $node->nodeError = $nodeError_list['default'];
    
    $wsnTopic_list = WSN_attributes_bydomain('WSN Topic Search');
    $node->wsnTopic = $wsnTopic_list['default'];
    
    $occOrder_list = WSN_attributes_bydomain('Order Occurence');
    $node->occOrder = $occOrder_list['default'];
    
    $dataInputMethod_list = WSN_attributes_bydomain('Data Input Method');
    $node->dataInputMethod = $dataInputMethod_list['default'];
    
    $notiRecurrence_list = WSN_attributes_bydomain('Recurrence');
    $node->notiRecurrence = $notiRecurrence_list['default'];
    
    $notiValue_list = WSN_attributes_bydomain('Recurrence Day');
    $node->notiValue = $notiValue_list['default'];
    
    $dataCompressionTech_list = WSN_attributes_bydomain('Data Compression Technique');
    $node->dataCompressionTech = $dataCompressionTech_list['default'];
  }
}

/**
 * Implements hook_node_revision_delete().
 */
function WSNnodes_node_revision_delete($node) {
  // Notice that we're matching a single revision based on the node's vid.
  db_delete('WSNnodes')
    ->condition('vid', $node->vid)
    ->execute();
}

/**
 * Implements hook_delete().
 */
function WSNnodes_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  db_delete('WSNnodes')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_load().
 */
function WSNnodes_load($nodes) {
  foreach ($nodes as $nid => &$node) {
    $result = db_select('WSNnodes', 'spr')
      ->fields('spr')
      ->condition('spr.vid', $node->vid)
      ->execute();
    $record = $result->fetchAssoc();

    foreach ($record as $key => $value) {
      $node->$key = $value;
    }

    $node->title_old = $node->title;
  }
}

/**
 * Implements hook_view().
 */
function WSNnodes_view($node, $view_mode) {
  $breadcrumb = array();
  $breadcrumb[] = l(t('WSN'), 'WSN');
  $breadcrumb[] = l(t('Nodes'), 'WSN/Nodes');
  drupal_set_breadcrumb($breadcrumb);

  return theme('WSNnodes_view', array('node' => $node, 'view_mode' => $view_mode));
}

/**
 * Implements hook_views_api().
 */
function WSNnodes_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'WSNnodes'),
  );
}

/**
 * Admin settings form for WSNnodes module
 */
function WSNnodes_admin_settings() {
  $form = array();

//  $form['WSNnodes_billable_default'] = array(
//    '#type' => 'checkbox',
//    '#title' => t('Default Value for billable field.'),
//    '#default_value' => variable_get('WSNnodes_billable_default', FALSE),
//    '#description' => t('When checked, WSN will set the Node to billable by default'),
//    '#size' => 5,
//  );

  return system_settings_form($form);
}

/**
 * Handler to automatically add Nodes to an invoice.
 */
//function WSNnodes_WSNinvoice_auto_add($node, $invoice_nid = NULL) {
//  if (!module_exists('WSNinvoice')) {
//    drupal_set_message(t('This function should only be called from within WSN Invoice'));
//    return;
//  }
//  elseif ($node->billed) {
//    drupal_set_message(t('This Node has already been billed!'));
//    return;
//  }
//  elseif (!$node->billable) {
//    drupal_set_message(t('This Node is marked unbillable!'));
//    return;
//  }
//  else {
//    global $user;
//
//    if (!$invoice_nid) {
//
//      $new_invoice = new StdClass;
//
//      // Code copied with edits from node form
//      $new_invoice->requestdate = time();
//      $new_invoice->duedate = $new_invoice->requestdate + (variable_get('WSNinvoice_payment_days', 30) * 86400);
//      $new_invoice->number = WSNinvoice_get_invoice_number($new_invoice->requestdate);
//
//      $new_invoice->title = $node->title;
//      $new_invoice->uid = $user->uid;
//      $new_invoice->type = 'WSNinvoice';
//      // $new_invoice->reference
//      $new_invoice->sites_nid = $node->sites_nid;
//      $new_invoice->sites_title = $node->sites_title;
//      $new_invoice->Node_nid = $node->nid;
//      $new_invoice->Node_title = $node->title;
//      // $new_invoice->amount
//      // $new_invoice->tax
//      // $new_invoice->total
//      // $new_invoice->totalcustomercurr
//      // $new_invoice->taxexempt
//      $new_invoice->src_nid = $node->nid;
//      $new_invoice->src_vid = $node->vid;
//
//      node_save($new_invoice);
//      $invoice_nid = $new_invoice->nid;
//    }
//    else {
//      $new_invoice = node_load($invoice_nid);
//    }
//
//    $rate_array = array('pricemode_used' => '', 'rate_to_use' => 0);
//
//    $rate_array = WSNinvoice_get_rate($node);
//
//    $count = count($new_invoice->items);
//
//    $new_invoice->items[$count]->description = WSNinvoice_get_item_desc($rate_array, $node);
//
//    $new_invoice->items[$count]->amount = WSNinvoice_get_item_amount($rate_array, $node);
//
//    // Tax percent simply uses default at the moment
//    $new_invoice->items[$count]->tax1percent = variable_get('WSN_tax1_percent', 20);
//    // $new_invoice_item->items[$count]->tax1
//    // $new_invoice_item->items[$count]->total
//    $new_invoice->items[$count]->src_nid = $node->nid;
//    $new_invoice->items[$count]->src_vid = $node->vid;
//
//    WSN_taxation($new_invoice->items[$count]);
//    WSNinvoice_update($new_invoice);
//  }
//
//  // Mark Node as billed.
//  db_query("UPDATE {WSNnodes} SET billed=%d WHERE vid=%d", 1, $node->vid);
//
//  return $invoice_nid;
//}

/**
 * Implements hook_token_list().
 */
function WSNnodes_token_list($type='all') {
  $tokens = array();
  if (($type == 'node') || ($type == 'all')) {
    $tokens['node']['WSNnodes-nodeStatus'] = t('WSN Node: Node Status.');
    $tokens['node']['WSNnodes-nodeCategory'] = t('WSN Node: Node Category.');
    $tokens['node']['WSNnodes-nodeError'] = t('WSN Node: Node Error.');
    $tokens['node']['WSNnodes-latitude'] = t('WSN Node: Latitude.');
    $tokens['node']['WSNnodes-longitude'] = t('WSN Node: Longitude.');
   
    $tokens['node']['WSNnodes-wsnTopic'] = t('WSN Node: WSN Topic.');
    $tokens['node']['WSNnodes-inputIdentifier'] = t('WSN Node: Input Identified.');
    $tokens['node']['WSNnodes-dataInputMethod'] = t('WSN Node: Data Input Method.');
    $tokens['node']['WSNnodes-dataCompressionTech'] = t('WSN Node: Data Compression Technique.');

    $tokens['node']['WSNnodes-readNumOccurence'] = t('WSN Node: No. of Reading Occurence.');
    $tokens['node']['WSNnodes-numSensorUnit'] = t('WSN Node: No. of Sensors.');
    
    $tokens['node']['WSNnodes-sensorDelimiter'] = t('WSN Node: Sensor Delimiter.');
    $tokens['node']['WSNnodes-dataDelimiter'] = t('WSN Node: Data Delimiter.');
    
    $tokens['node']['WSNnodes-occOrder'] = t('WSN Node: Order Occurence.');
    $tokens['node']['WSNnodes-timeInterval'] = t('WSN Node: Time Interval.');

    $tokens['node']['WSNnodes-notificationE'] = t('WSN Node: Notification Enable.');    
    $tokens['node']['WSNnodes-notiRecurrence'] = t('WSN Node: Recurrence.');
    $tokens['node']['WSNnodes-notiValue'] = t('WSN Node: Recurrence Day.');
    
    $tokens['node']['WSNnodes-message'] = t('WSN Node: Message.');
    $tokens['node']['WSNnodes-receiverNum'] = t('WSN Node: Receiver Number.');
    
    
    if (module_exists('WSNsites')) {
      $tokens['node']['WSNnodes-sites-nid'] = t('WSN Node: Sites Node ID.');
      $tokens['node']['WSNnodes-sites-title'] = t('WSN Node: Sites Title.');
    }
  }
  return $tokens;
}

/**
 * Implements hook_token_values().
 */
function WSNnodes_token_values($type, $object = NULL) {
  $values = array();
  $node = $object;
  if ((($type == 'node') || ($type == 'all')) && ($node->type === 'WSNnodes')) {
    $values['WSNnodes-nodeStatus'] = $node->nodeStatus;
    $values['WSNnodes-nodeError'] = $node->nodeError;
    $values['WSNnodes-nodeCategory'] = $node->nodeCategory;
    $values['node']['WSNnodes-wsnTopic'] = $node->wsnTopic;
    $values['node']['WSNnodes-inputIdentifier'] = $node->inputIdentifier;
    $values['node']['WSNnodes-dataInputMethod'] = $node->dataInputMethod;
    $values['node']['WSNnodes-latitude'] = $node->latitude;
    $values['node']['WSNnodes-longitude'] = $node->longitude;
    $values['node']['WSNnodes-dataCompressionTech'] = $node->dataCompressionTech;
    $values['node']['WSNnodes-readNumOccurence'] = $node->readNumOccurence;
    $values['node']['WSNnodes-numSensorUnit'] = $node->numSensorUnit;
    $values['node']['WSNnodes-occOrder'] = $node->occOrder;
    $values['node']['WSNnodes-timeInterval'] = $node->timeInterval;

    $values['node']['WSNnodes-sensorDelimiter'] = $node->sensorDelimiter;
    $values['node']['WSNnodes-dataDelimiter'] = $node->dataDelimiter;

    $values['node']['WSNnodes-notificationE'] = $node->notificationE;    
    $values['node']['WSNnodes-notiRecurrence'] = $node->notiRecurrence;
    $values['node']['WSNnodes-notiValue'] = $node->notiValue;
    $values['node']['WSNnodes-message'] = $node->message;
    $values['node']['WSNnodes-receiverNum'] = $node->receiverNum;    
    if (module_exists('WSNsites')) {
      $values['WSNnodes-sites-nid'] = $node->sites_nid;
      $values['WSNnodes-sites-title'] = $node->sites_title;
    }
  }
  return $values;
}

/**
 * Implements  hook_node_access_records().
 */
function WSNnodes_node_access_records($node) {
  if (empty($node->status)) {
    // Lets Drupal take care of permission to unpublished nodes.
    return array();
  }
  $type = is_string($node) ? $node : $node->type;
  $grants = array();
  if ($type == 'WSNnodes') {
    // WSN Node: view all
    $grants[] = array(
      'realm' => 'WSNnodes_view_all',
      'gid' => 0,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'error' => 0,
    );
    // WSN Node: view own
    $grants[] = array(
      'realm' => 'WSNnodes_view_own',
      'gid' => $node->uid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'error' => 0,
    );
    // WSN Node: view of user sites
    if (isset($node->sites_nid) && !empty($node->sites_nid)) {
      $grants[] = array(
        'realm' => 'WSNnodes_view_if_user_sites',
        'gid' => $node->sites_nid,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'error' => 0,
      );
    }
    // WSN Node: view if WSN Manager
//    if (isset($node->manager_nid) && !empty($node->manager_nid)) {
//      $grants[] = array(
//        'realm' => 'WSNnodes_view_if_manager',
//        'gid' => $node->manager_nid,
//        'grant_view' => 1,
//        'grant_update' => 0,
//        'grant_delete' => 0,
//        'error' => 0,
//      );
//    }
    // WSN Node: view if assigned to Node
//    if (isset($node->assigned_nid) && !empty($node->assigned_nid)) {
//      $grants[] = array(
//        'realm' => 'WSNnodes_view_if_assigned',
//        'gid' => $node->assigned_nid,
//        'grant_view' => 1,
//        'grant_update' => 0,
//        'grant_delete' => 0,
//        'error' => 0,
//      );
//    }
    // WSN Node: edit all
    $grants[] = array(
      'realm' => 'WSNnodes_update_all',
      'gid' => 0,
      'grant_view' => 0,
      'grant_update' => 1,
      'grant_delete' => 0,
      'error' => 0,
    );
    // WSN Node: edit own
    $grants[] = array(
      'realm' => 'WSNnodes_update_own',
      'gid' => $node->uid,
      'grant_view' => 0,
      'grant_update' => 1,
      'grant_delete' => 0,
      'error' => 0,
    );
    // WSN Node: edit of user sites
    if (isset($node->sites_nid) && !empty($node->sites_nid)) {
      $grants[] = array(
        'realm' => 'WSNnodes_update_if_user_sites',
        'gid' => $node->sites_nid,
        'grant_view' => 0,
        'grant_update' => 1,
        'grant_delete' => 0,
        'error' => 0,
      );
    }
    // WSN Node: edit if WSN Manager
//    if (isset($node->manager_nid) && !empty($node->manager_nid)) {
//      $grants[] = array(
//        'realm' => 'WSNnodes_update_if_manager',
//        'gid' => $node->manager_nid,
//        'grant_view' => 0,
//        'grant_update' => 1,
//        'grant_delete' => 0,
//        'error' => 0,
//      );
//    }
    // WSN Node: edit if assigned to Node
//    if (isset($node->assigned_nid) && !empty($node->assigned_nid)) {
//      $grants[] = array(
//        'realm' => 'WSNnodes_update_if_assigned',
//        'gid' => $node->assigned_nid,
//        'grant_view' => 0,
//        'grant_update' => 1,
//        'grant_delete' => 0,
//        'error' => 0,
//      );
//    }
    // WSN Node: delete all
    $grants[] = array(
      'realm' => 'WSNnodes_delete_all',
      'gid' => 0,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 1,
      'error' => 0,
    );
    // WSN Node: delete own
    $grants[] = array(
      'realm' => 'WSNnodes_delete_own',
      'gid' => $node->uid,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 1,
      'error' => 0,
    );
    // WSN Node: delete of user sites
    if (isset($node->sites_nid) && !empty($node->sites_nid)) {
      $grants[] = array(
        'realm' => 'WSNnodes_delete_if_user_sites',
        'gid' => $node->sites_nid,
        'grant_view' => 0,
        'grant_update' => 0,
        'grant_delete' => 1,
        'error' => 0,
      );
    }
    // WSN Node: delete if WSN Manager
//    if (isset($node->manager_nid) && !empty($node->manager_nid)) {
//      $grants[] = array(
//        'realm' => 'WSNnodes_delete_if_manager',
//        'gid' => $node->manager_nid,
//        'grant_view' => 0,
//        'grant_update' => 0,
//        'grant_delete' => 1,
//        'error' => 0,
//      );
//    }
    // WSN Node: delete if assigned to Node
//    if (isset($node->assigned_nid) && !empty($node->assigned_nid)) {
//      $grants[] = array(
//        'realm' => 'WSNnodes_delete_if_assigned',
//        'gid' => $node->assigned_nid,
//        'grant_view' => 0,
//        'grant_update' => 0,
//        'grant_delete' => 1,
//        'error' => 0,
//      );
//    }
  }
  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function WSNnodes_node_grants($account, $op) {
//  if (module_exists('WSNperson')) {
//    _WSNperson_user_load($account);
//    if (!empty($account->WSNteam) AND is_array($account->WSNteam)) {
//      $assigned_nids = $account->WSNteam;
//    }
//    if (isset($account->WSNperson_nid) AND !empty($account->WSNperson_nid)) {
//      $assigned_nids[] = $account->WSNperson_nid;
//    }
//  }
  $grants = array();
  switch ($op) {
    case 'view':
      if (user_access('WSN Node: view all', $account)) {
        $grants['WSNnodes_view_all'] = array(0);
      }
      if (user_access('WSN Node: view own', $account)) {
        $grants['WSNnodes_view_own'] = array($account->uid);
      }
      if (user_access('WSN Node: view of user sites', $account)) {
        $grants['WSNnodes_view_if_user_sites'] = array($account->WSNsites_nid);
      }
//      if (isset($account->WSNperson_nid)) {
//        if (user_access('WSN Node: view if WSN Manager', $account)) {
//          $grants['WSNnodes_view_if_manager'] = array($account->WSNperson_nid);
//        }
//        if (user_access('WSN Node: view if assigned to Node', $account)) {
//          $grants['WSNnodes_view_if_assigned'] = $assigned_nids;
//        }
//      }
      break;

    case 'update':
      if (user_access('WSN Node: edit all', $account)) {
        $grants['WSNnodes_update_all'] = array(0);
      }
      if (user_access('WSN Node: edit own', $account)) {
        $grants['WSNnodes_update_own'] = array($account->uid);
      }
      if (user_access('WSN Node: edit of user sites', $account)) {
        $grants['WSNnodes_update_if_user_sites'] = array($account->WSNsites_nid);
      }
//      if (isset($account->WSNperson_nid)) {
//        if (user_access('WSN Node: edit if WSN Manager', $account)) {
//          $grants['WSNnodes_update_if_manager'] = array($account->WSNperson_nid);
//        }
//        if (user_access('WSN Node: edit if assigned to Node', $account)) {
//          $grants['WSNnodes_update_if_assigned'] = $assigned_nids;
//        }
//      }
      break;

    case 'delete':
      if (user_access('WSN Node: delete all', $account)) {
        $grants['WSNnodes_delete_all'] = array(0);
      }
      if (user_access('WSN Node: delete own', $account)) {
        $grants['WSNnodes_delete_own'] = array($account->uid);
      }
      if (user_access('WSN Node: delete of user sites', $account)) {
        $grants['WSNnodes_delete_if_user_sites'] = array($account->WSNsites_nid);
      }
//      if (isset($account->WSNperson_nid)) {
//        if (user_access('WSN Node: delete if WSN Manager', $account)) {
//          $grants['WSNnodes_delete_if_manager'] = array($account->WSNperson_nid);
//        }
//        if (user_access('WSN Node: delete if assigned to Node', $account)) {
//          $grants['WSNnodes_delete_if_assigned'] = $assigned_nids;
//        }
//      }
      break;
  }
  return $grants;
}

/**
 * Implements hook_WSN_dashboard_links().
 */
function WSNnodes_WSN_dashboard_links($type) {
  $links = array();
  if ($type == 'page' || $type == 'block') {
    $links[] = array(
      'theme' => 'WSN_dashboard_link',
      'title' => t('Nodes'),
      'icon' => 'WSNnodes',
      'path' => 'WSN/Nodes',
      'params' => array(),
      'node_type' => 'WSNnodes',
      'add_type' => 'WSNnodes',
      'map' => array(),
      'weight' => 4,
    );
  }
  return $links;
}
