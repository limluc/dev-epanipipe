<?php

/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


function WSN_help($path, $arg) {
  $output = '';

  switch ($path) {
    case "admin/help#WSN":
      $output = '<p>' . t("Provides complete WSN environment") . '</p>';
      break;
    case "admin/help#WSNattribute":
      $output = '<p>' . t("Provides attributes support for WSN") . '</p>';
      $output .= '<p>' . t(":") . '</p>';
      $output .= '<p>' . t(".") . '</p>';
      $output .= '<p>' . t(".") . '</p>';
      $output .= '<p>' . t(":") . '<br />';
//      $output .= '<ul>';
////      $output .= '<li>' . t("not applicable.") . '</li>';
////      $output .= '<li>' . t("fixed.") . '</li>';
////      $output .= '<li>' . t("hourly.") . '</li>';
////      $output .= '<li>' . t("daily.") . '</li>';
////      $output .= '<li>' . t("fixed_price.") . '</li>';
//      $output .= '</ul>';
      break;
  }

  return $output;
}


/**
 * Implements hook_permission().
 */
function WSN_permission() {
  return array(
    'WSN: access dashboard' => array(
      'title' => t('Access Dashboard'),
      'description' => t('Allows the user to access the WSN dashboard.'),
    ),
    'WSN: access administration pages' => array(
      'title' => t('Administer WSN'),
       'description' => t('Allow the user to perform administrative tasks on WSN module.'),
    ),
  );
}

// Note #370120. It is intended to move these calls to pages which specifically need them rather than on hook_init.
/**
 * Implements hook_init().
 */
function WSN_init() {
  drupal_add_css(drupal_get_path('module', 'WSN') . '/WSN.css');
}

/**
 * Implements hook_menu().
 */
function WSN_menu() {
  $items = array();

  $dashboard_types = module_invoke_all('WSN_dashboard_types');
  foreach ($dashboard_types as $type => $type_info) {
    if (isset($type_info['url'])) {
      $title = isset($type_info['title']) ? $type_info['title'] : 'WSN Dashboard';
      $items[$type_info['url']] = array(
        'title' => $title,
        'description' => $title,
        'page callback' => 'WSN_dashboard',
        'page arguments' => array($type),
        'access arguments' => array('WSN: access dashboard'),
        'parent' => '',
        'type' => MENU_NORMAL_ITEM,
      );
      if (isset($type_info['menu_options'])) {
        $items[$type_info['url']] = array_merge($items[$type_info['url']], $type_info['menu_options']);
      }
    }
  }

  $items['admin/config/WSN'] = array(
    'title' => 'WSN',
    'description' => 'WSN administration page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('WSN_admin_settings'),
    'access arguments' => array('WSN: access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/WSN/WSN'] = array(
    'title' => 'WSN',
    'description' => 'WSN administration page',
    'access arguments' => array('WSN: access administration pages'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -100,
  );

  $items['WSN/attributes'] = array(
    'title' => 'Attributes',
    'description' => 'WSN attributes',
    'page callback' => 'WSN_attribute_list',
    'access arguments' => array('WSN: access administration pages'),
    'file' => 'WSN.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 11,
  );

  $items['WSN/attributes/add'] = array(
    'title' => 'Add a new attribute',
    'description' => 'WSN attributes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('WSN_attribute_add'),
    'access arguments' => array('WSN: access administration pages'),
    'file' => 'WSN.admin.inc',
    'type' => MENU_CALLBACK);

  $items['WSN/attributes/edit/%'] = array(
    'title' => 'Edit an attribute',
    'description' => 'WSN attributes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('WSN_attribute_edit', 3),
    'access arguments' => array('WSN: access administration pages'),
    'file' => 'WSN.admin.inc',
    'type' => MENU_CALLBACK);

  $items['WSN/attributes/delete/%'] = array(
    'title' => 'Delete an attribute',
    'description' => 'WSN attributes',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('WSN_attribute_delete', 3),
    'access arguments' => array('WSN: access administration pages'),
    'file' => 'WSN.admin.inc',
    'type' => MENU_CALLBACK);

  $items['WSN/attributes/domain/autocomplete'] = array(
    'title' => 'List of attributes',
    'description' => 'WSN attributes',
    'page callback' => '_WSN_attribute_domain_autocomplete',
    'page arguments' => array(4),
    'access arguments' => array('WSN: access administration pages'),
    'file' => 'WSN.admin.inc',
    'type' => MENU_CALLBACK);

  return $items;
}

/**
 * Implements hook_theme().
 */
function WSN_theme() {
  return array(
    'WSN_form_group' => array(
      'file'      => 'WSN.theme.inc',
      'render element' => 'element',
    ),
    'datetime' => array(
      'file'      => 'WSN.theme.inc',
      'arguments' => array('element'),
    ),
    'dateext' => array(
      'file'      => 'WSN.theme.inc',
      'arguments' => array('element'),
    ),
    'WSN_link' => array(
      'file'      => 'WSN.theme.inc',
      'arguments' => array('source_module', 'destination_module', 'node_nid', 'weight'),
    ),
    'WSN_view_item' => array(
      'file'      => 'WSN.theme.inc',
      'variables' => array('label', 'value'),
    ),
    'WSN_dashboard' => array(
      'file'      => 'WSN.theme.inc',
      'arguments' => array('links' => array()),
    ),
    'WSN_dashboard_block' => array(
      'file'      => 'WSN.theme.inc',
      'arguments' => array('links' => array()),
    ),
    'WSN_dashboard_link' => array(
      'file'      => 'WSN.theme.inc',
      'arguments' => array('link_blocks' => array()),
    ),
    'WSN_dashboard_links_weight_table' => array(
      'file'      => 'WSN.theme.inc',
      'arguments' => array('form' => array()),
    ),
    'WSN_number_items' => array(
      'file'      => 'WSN.theme.inc',
      'arguments' => array('number' => ''),
    ),
    'WSN_attribute_list' => array(
      'file'      => 'WSN.theme.inc',
      'render element' => 'form',
    ),
  );
}


/**
 * Function to create a dashboard (call to theme function)
 *
 * @param string $type
 *   Dashboard type, used for WSN_get_dashboard_links
 * @return string
 *   Themed string
 */
function WSN_dashboard($type = 'page') {
  $types = module_invoke_all('WSN_dashboard_types');
  // only set Page Title if it has a url, so there is a menu entry for that
  // The block type has no url and shouldn't change the title!
  if (isset($types[$type]['url']) && isset($types[$type]['title'])) {
    drupal_set_title($types[$type]['title']);
  }
  drupal_add_css(drupal_get_path('module', 'WSN') . '/WSN-dashboard.css');

  $link_blocks = WSN_dashboard_get_links(TRUE, $type);
  if (!empty($link_blocks)) {
    // DIVIDE LINKS INTO TWO BLOCKS
    $count = ceil(count($link_blocks) / 2);
    $link_blocks = array_chunk($link_blocks, $count);
  }
  $theme = isset($types[$type]['theme']) ? $types[$type]['theme'] : 'WSN_dashboard';
  $content = theme($theme, $link_blocks);

  return $content;
}

/**
 * Return links array for the WSN dashboard.
 *
 * @param bool $check_active
 *   When FALSE, returns all links whether active or not (for admin settings)
 * @param string $type
 *   Dashboard type
 * @return array
 *   Dashboard links
 */
function WSN_dashboard_get_links($check_active = TRUE, $type = 'page') {

  $links = module_invoke_all('WSN_dashboard_links', $type);

  if (!empty($links)) {

    $default_dashboard_settings = variable_get('WSN_' . $type . 'dashboard_settings', array());

    $weight = 0;
    foreach ($links as $key => &$link_array) {

      // ACTIVE CHECK
      if ($check_active && isset($default_dashboard_settings[$link_array['path']]['active']) && $default_dashboard_settings[$link_array['path']]['active'] == FALSE) {
        unset($links[$key]);
        continue;
      }

      // MODULE EXIST CHECK
      if (isset($link_array['destination_module']) && !module_exists($link_array['destination_module'])) {
        unset($links[$key]);
        continue;
      }

      // ACCESS CHECK
      if (!drupal_valid_path($link_array['path'])) {
        unset($links[$key]);
      }

      if (isset($default_dashboard_settings[$link_array['path']]['weight'])) {
        $link_array['weight'] = $default_dashboard_settings[$link_array['path']]['weight'];
      }
      elseif (!isset($link_array['weight'])) {
        $link_array['weight'] = $weight;
        $weight++;
      }
    }

    // HOOK FOR ALTERING LINKS
    drupal_alter('WSN_dashboard_links', $links, $type);

    // SORT LINKS BY WEIGHT
    uasort($links, '_WSN_dashboard_sort_links');

  }
  return $links;
}

/**
 * Orders dashboard links by weight. Helper for WSN_dashboard_get_links().
 *
 * @see uasort()
 * @param array $a
 *   Dashboard link array
 * @param array $b
 *   Dashboard link array
 * @return int
 *   Relative weight of $a and $b
 */
function _WSN_dashboard_sort_links($a, $b) {
  if (intval($a['weight']) == intval($b['weight'])) {
      return 0;
  }
  elseif (intval($a['weight']) < intval($b['weight'])) {
    return -1;
  }
  else {
    return 1;
  }
}

/**
 * Implements hook_WSN_dashboard_links().
 */
function WSN_WSN_dashboard_links($type) {
  $links = array();
  if ($type == 'page' || $type == 'block') {
    $links[] = array(
      'title' => t('Configuration'),
      'icon' => 'WSNconfiguration',
      'path' => 'admin/config/WSN',
      'params' => array(),
      'node_type' => '',
      'add_type' => '',
      'map' => array(),
      'weight' => 15,
    );
    $links[] = array(
      'theme' => 'WSN_dashboard_link',
      'title' => t('Attributes'),
      'icon' => 'WSNattributes',
      'path' => 'WSN/attributes',
      'params' => array(),
      'map' => array(),
      'weight' => 14,
    );
  }
  return $links;
}

/**
 * Implements hook_WSN_dashboard_types().
 *
 * @return array
 *   Definition of dashboard type.
 */
function WSN_WSN_dashboard_types() {
  return array(
    'page' => array(
      // URL: menu path which should be used, if omitted no menu item will be created
      'url'         => 'WSN',
      // title: Required. Title of menu item, page title and title for the WSN settings
      'title'       => t('WSN Dashboard'),
      // description: Required. Description for the fieldset in the WSN settings
      'description' => t('You can disable or reorder the links from the !dashboard here', array('!dashboard' => l(t('dashboard'), 'WSN'))),
      // theme: theme which should be used to display this dashboard. If omitted uses standard theme WSN_dashboard
      'theme'       => 'WSN_dashboard',
      // menu_options: This array will be merged into the default menu item array. If the menu should have special access arguments, title, it can be set here.
      // page callback and page argument shouldn't been overwritten.
      'menu_options' => array(
        'title'       => t('WSN'),
        'description' => t('WSN dashboard'),
      ),
    ),
    'block' => array(
      'title'       => t('Dashboard block'),
      'description' => t('You can disable or reorder the links from the dashboard !block here', array('!block' => l(t('block'), 'admin/build/block'))),
      'theme'       => 'WSN_dashboard_block',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function WSN_block_info() {
  // Register WSN menu block
  $blocks['WSN_menu'] = array(
    'info' => t('WSN Menu'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function WSN_block_view($delta = '') {
  // Define WSN menu block
  $block = array();

  switch ($delta) {
    case 'WSN_menu':
      $block = array(
        'subject' => 'WSN',
        'content' => WSN_dashboard('block'),
      );
    break;
  }

  return $block;
}

/**
 * Defines the administration settings form for the WSN module
 */
function WSN_admin_settings() {
  $form = array();
  $w = -10;

  $form['icons'] = array(
    '#type' => 'fieldset',
    '#title' => t('Icons'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
    '#weight' => $w++,
  );

  $form['icons']['WSN_icons_display'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display WSN icons'),
    '#default_value' => variable_get('WSN_icons_display', TRUE),
    '#description' => t('The icons that ship with WSN may not fit well with some themes. If this box is unchecked, icons will be hidden.'),
    '#weight' => $w++,
  );

  $form['icons']['WSN_icons_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Icons directory'),
    '#default_value' => variable_get('WSN_icons_path', drupal_get_path('module', 'WSN') . '/icons'),
    '#description' => t("The directory that contains WSN's icons."),
    '#weight' => $w++,
    '#element_validate' => array('WSN_admin_settings_icons_path_validate'),
  );

//  $form['lists'] = array(
//    '#type' => 'fieldset',
//    '#title' => t('Lists'),
//    '#collapsed' => TRUE,
//    '#collapsible' => TRUE,
//    '#weight' => $w++,
//  );
//
//  $form['lists']['WSN_default_items_per_page'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Default Items per Page'),
//    '#default_value' => variable_get('WSN_default_items_per_page', 10),
//    '#description' => t('Default items per page when viewing lists'),
//    '#size' => 5,
//    '#weight' => $w++
//  );
//
//  $form['yearsrange'] = array(
//    '#type' => 'fieldset',
//    '#title' => t('Years range in dates'),
//    '#collapsed' => TRUE,
//    '#collapsible' => TRUE,
//    '#weight' => $w++,
//  );
//
//  $form['yearsrange']['group0'] = array(
//    '#type' => 'markup',
////    '#theme' => 'WSN_form_group',
//    '#weight' => $w++,
//  );
//
//  $form['yearsrange']['group0']['WSN_yearsrangebegin'] = array(
//    '#type' => 'select',
//    '#title' => t('Begin'),
//    '#options' => drupal_map_assoc(range(2010, 2025)),
//    '#default_value' => variable_get('WSN_yearsrangebegin', 2013),
//  );
//
//  $form['yearsrange']['group0']['WSN_yearsrangeend'] = array(
//    '#type' => 'select',
//    '#title' => t('End'),
//    '#options' => drupal_map_assoc(range(2010, 2025)),
//    '#default_value' => variable_get('WSN_yearsrangeend', 2013),
//  );

//  $form['taxation'] = array(
//    '#type' => 'fieldset',
//    '#title' => t('Taxation defaults'),
//    '#collapsed' => TRUE,
//    '#collapsible' => TRUE,
//    '#weight' => $w++,
//  );
//
//  $form['taxation']['WSN_tax1_app'] = array(
//    '#type' => 'select',
//    '#title' => t('Tax 1: Application'),
//    '#default_value' => variable_get('WSN_tax1_app', 1),
//    '#description' => t('The method of application to use for Tax 1'),
//    '#options' => array(
//      1 => t('Apply to item amount'),
//      0 => t('Do not apply tax'),
//    ),
//    '#weight' => $w++,
//  );
//
//  $form['taxation']['group0'] = array(
//    '#type' => 'markup',
////    '#theme' => 'WSN_form_group',
//    '#weight' => $w++,
//  );
//
//  $form['taxation']['group0']['WSN_tax1_name'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Tax 1: Name'),
//    '#default_value' => variable_get('WSN_tax1_name', 'VAT'),
//    '#description' => t('The name to use for Tax 1'),
//    '#weight' => $w++,
//  );
//
//  $form['taxation']['group0']['WSN_tax1_percent'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Tax 1: Default percentage'),
//    '#default_value' => variable_get('WSN_tax1_percent', 20),
//    '#description' => t('Default percentage for Tax 1'),
//    '#size' => 20,
//    '#weight' => $w++
//  );
//
//  $form['taxation']['WSN_tax2_app'] = array(
//    '#type' => 'select',
//    '#title' => t('Tax 2: Application'),
//    '#default_value' => variable_get('WSN_tax2_app', 0),
//    '#description' => t('The method of application to use for Tax 2'),
//    '#options' => array(
//      2 => t('Apply to total of item amount plus previous tax'),
//      1 => t('Apply to item amount'),
//      0 => t('Do not apply tax'),
//    ),
//    '#weight' => $w++,
//  );
//
//  $form['taxation']['group1'] = array(
//    '#type' => 'markup',
////    '#theme' => 'WSN_form_group',
//    '#weight' => $w++,
//  );
//
//  $form['taxation']['group1']['WSN_tax2_name'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Tax 2: Name'),
//    '#default_value' => variable_get('WSN_tax2_name', 'Tax 2 Name'),
//    '#description' => t('The name to use for Tax 2'),
//    '#weight' => $w++,
//  );
//
//  $form['taxation']['group1']['WSN_tax2_percent'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Tax 2: Default percentage'),
//    '#default_value' => variable_get('WSN_tax2_percent', 20),
//    '#description' => t('Default percentage for Tax 2'),
//    '#size' => 20,
//    '#weight' => $w++,
//  );
//
//  $form['taxation']['WSN_tax_display'] = array(
//   '#type' => 'checkbox',
//   '#title' => t('Display tax edit fields'),
//   '#default_value' => variable_get('WSN_tax_display', TRUE),
//   '#description' => t('If disabled, all tax fields will use the default values and you will not be able to override them for any nodes until this setting is enabled again.'),
//   '#weight' => $w++,
//  );
//
//  $form['taxation']['WSN_tax2_display'] = array(
//   '#type' => 'checkbox',
//   '#title' => t('Display tax 2 edit fields'),
//   '#default_value' => variable_get('WSN_tax2_display', TRUE),
//   '#description' => t('If disabled, tax 2 fields will use the default values and you will not be able to override them for any nodes until this setting is enabled again. This setting will be ignored unless the general "Display tax edit fields" setting is enabled above.'),
//    '#weight' => $w++,
//  );

  // DASHBOARD SETTINGS
  $form['WSN_dashboard_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Dashboard settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $types = module_invoke_all('WSN_dashboard_types');
  foreach ($types as $type => $type_data) {
    $all_links_options = array();
    $all_links = WSN_dashboard_get_links(FALSE, $type);
    foreach ($all_links as $link) {
      $all_links_options[$link['path']] = l($link['title'], $link['path']);
    }

    $default_dashboard_settings = variable_get('WSN_' . $type . 'dashboard_settings', array());

    $form['WSN_dashboard_settings'][$type] = array(
      '#type' => 'fieldset',
      '#title' => t($type_data['title']),
      '#description' => $type_data['description'],
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    $form['WSN_dashboard_settings'][$type]['dashboard_links'] = array(
//      '#theme' => 'WSN_dashboard_links_weight_table',
      '#infix' => $type,
    );

    $weight = 0;
    foreach ($all_links_options as $path => $title) {
      $form['WSN_dashboard_settings'][$type]['dashboard_links'][$path][$type . '_WSN_dashboard_link_active_' . $path] = array(
        '#type' => 'checkbox',
        '#title' => $title,
        '#default_value' => isset($default_dashboard_settings[$path]['active']) ? $default_dashboard_settings[$path]['active'] : TRUE,
      );
      $form['WSN_dashboard_settings'][$type]['dashboard_links'][$path][$type . '_WSN_dashboard_link_weight_' . $path] = array(
        '#type' => 'weight',
        '#default_value' => isset($default_dashboard_settings[$path]['weight']) ? $default_dashboard_settings[$path]['weight'] : $weight,
        '#delta' => 30,
      );
      $form['WSN_dashboard_settings'][$type]['dashboard_links'][$path]['#value'] = $title;
      $weight++;
    }
  }

  if (empty($form['#submit'])) {
    $form['#submit'] = array();
  }
  $form['#submit'] = array('WSN_admin_settings_form_submit');

  return system_settings_form($form);
}

/**
 * Validate Icon Path form element.
 *
 * @param $form
 *   Form array
 * @param $form_values
 *   Form values
 */
function WSN_admin_settings_icons_path_validate($form, $form_values) {
  $icon_path_old = variable_get('WSN_icons_path', drupal_get_path('module', 'WSN') . '/icons');
  $icon_path = $form_values['values']['WSN_icons_path'];
  // check if directory exists
  if (!is_dir($icon_path)) {
    form_set_error('WSN_icons_path', t('Icon path %path does not exist', array('%path' => $icon_path)));
  }
  // if it exists and changed, delete cache, so there are no old values in the cache
  elseif ($icon_path != $icon_path_old) {
    cache_clear_all('WSN:icons', 'cache', FALSE);
  }
}

/**
 * Submit function for admin settings form.
 */
function WSN_admin_settings_form_submit($form, $form_state) {
  $op = isset($form_state['values']['op']) ? $form_state['values']['op'] : '';
  // RESET
  if ($op == t('Reset to defaults')) {
    $types = module_invoke_all('WSN_dashboard_types');
    foreach ($types as $type => $type_data) {
      variable_del('WSN_' . $type . 'dashboard_settings');
    };
    return;
  }

  // GET OPTIONS
  $types = module_invoke_all('WSN_dashboard_types');
  foreach ($types as $type => $type_data) {
    $all_links = WSN_dashboard_get_links(FALSE, $type);
    $settings = array();
    foreach ($all_links as $link) {
      $path = $link['path'];
      $settings[$path]['active'] = $form_state['values'][$type . '_WSN_dashboard_link_active_' . $path];
      $settings[$path]['weight'] = $form_state['values'][$type . '_WSN_dashboard_link_weight_' . $path];
    }
    variable_set('WSN_' . $type . 'dashboard_settings', $settings);
  }

}

/**
 * Implements hook_elements().
 */
function WSN_elements() {
  $type['datetime'] = array(
    '#input' => TRUE,
    '#process' => array('WSN_datetime_expand'),
    '#element_validate' => array('WSN_datetime_validate'),
    '#default_value' => array(
      'day' => format_date(time(), 'custom', 'j'),
      'month' => format_date(time(), 'custom', 'n'),
      'year' => format_date(time(), 'custom', 'Y'),
      'hour' => format_date(time(), 'custom', 'H'),
      'minute' => format_date(time(), 'custom', 'i'),
    ),
  );
  $type['dateext'] = array(
    '#input' => TRUE,
    '#process' => array('WSN_dateext_expand'),
    '#element_validate' => array('WSN_dateext_validate'),
    '#default_value' => time(),
    '#withnull' => FALSE,
    '#disable_date_popup' => FALSE,
  );
  return $type;
}

/**
 * Expands a date into individual elements.
 */
function WSN_datetime_expand($element) {
  if (empty($element['#value'])) {
    $element['#value'] = array(
      'day' => format_date(time(), 'custom', 'j'),
      'month' => format_date(time(), 'custom', 'n'),
      'year' => format_date(time(), 'custom', 'Y'),
      'hour' => format_date(time(), 'custom', 'H'),
      'minute' => format_date(time(), 'custom', 'i'),
    );
  }

  $element['#tree'] = TRUE;

  // Determine the order of day, month, year in the site's chosen date format.
  $format = variable_get('date_format_short', 'm/d/Y - H:i');
  $sort = array();
  $sort['day'] = max(strpos($format, 'd'), strpos($format, 'j'));
  $sort['month'] = max(strpos($format, 'm'), strpos($format, 'M'));
  $sort['year'] = strpos($format, 'Y');
  $sort['hour'] = strpos($format, 'H');
  $sort['minute'] = strpos($format, 'i');
  asort($sort);
  $order = array_keys($sort);

  // Output multi-selector for date.
  foreach ($order as $type) {
    switch ($type) {
      case 'year':
        $options = drupal_map_assoc(range(variable_get('WSN_yearsrangebegin', 2001), variable_get('WSN_yearsrangeend', 2012)));
        break;
      case 'month':
        $options = drupal_map_assoc(range(1, 12), 'map_month');
        break;
      case 'day':
        $options = drupal_map_assoc(range(1, 31));
        break;
      case 'hour':
        $options = drupal_map_assoc(range(0, 23));
        break;
      case 'minute':
        $options = drupal_map_assoc(range(0, 59));
        break;
    }
//    $parents = $element['#parents'];
//    $parents[] = $type;
//    $element[$type] = array(
//      '#type' => 'select',
//      '#value' => $element['#value'][$type],
//      '#attributes' => $element['#attributes'],
//      '#options' => $options,
//    );
  }
  return $element;
}

/**
 * Validate form date elements.
 */
function WSN_datetime_validate($form) {
  if (!checkdate($form['#value']['month'], $form['#value']['day'], $form['#value']['year'])) {
    form_error($form, t('The specified date is invalid.'));
  }
}

/**
 * Expand form date elements into day, month, and year.
 */
function WSN_dateext_expand($element, $edit, $form_state, $form) {
  if (empty($element['#value'])) {
    if (!$element['#withnull']) {
      $element['#value'] = array(
        'day' => format_date(time(), 'custom', 'j'),
        'month' => format_date(time(), 'custom', 'n'),
        'year' => format_date(time(), 'custom', 'Y'),
      );
    }
    else {
      $element['#value'] = array('day' => -1, 'month' => -1, 'year' => -1);
    }
  }

  $element['#tree'] = TRUE;

  // If date popup exists, we should use date popup,
  // but you can force to disable it by set disable_date_popup to true
  if (module_exists('date_popup') && (!isset($element['disable_date_popup']) || !$element['disable_date_popup'])) {

    // value is timestamp
    if (is_numeric($element['#value']) && $element['#value'] != 0) {
      $element['#value'] = array('popup' => format_date($element['#value'], 'custom', 'Y-m-d'));
    }
    // value is date array
    elseif (is_array($element['#value']) && !isset($element['#value']['popup']) && $element['#value']['day'] != -1) {
      $element['#value'] = array('popup' => sprintf("%04d-%02d-%02d", $element['#value']['year'], $element['#value']['month'], $element['#value']['day']));
    }
    elseif (is_numeric($element['#value']) || !isset($element['#value']['popup']) || (isset($element['#value']['day']) && $element['#value']['day'] == -1)) {
      $element['#value'] = array('popup' => '');
    }

    if (is_array($element['#value']['popup']) && isset($element['#value']['popup']['date'])) {
      $value = $element['#value']['popup']['date'];
    }
    else {
      $value = $element['#value']['popup'];
    }

    $current_year = date('Y');
    $begin = variable_get('WSN_yearsrangebegin', 2001) - $current_year;
    if ($begin > 0) {
      $begin = '+' . $begin;
    }
    $end = variable_get('WSN_yearsrangeend', 2015) - $current_year;
    if ($end > 0) {
      $end = '+' . $end;
    }

    $parents = $element['#parents'];
    $parents[] = 'popup';
    $element['popup'] = array(
      '#type' => 'date_popup',
      '#date_timezone' => date_default_timezone_name(),
      '#date_format' => "Y-m-d",
      '#date_year_range' => $begin . ':' . $end,
      '#default_value' => $value,
      '#attributes' => $element['#attributes'],
      '#withnull' => $element['#withnull'],
    );
  }
  // fallback - use select boxes to choose the date
  else {

    // its a timestamp, convert it to a date format
    if (is_numeric($element['#value']) && $element['#value'] != 0) {
      $element['#value'] = _WSN_gmtimestamp_to_date($element['#value']);
    }

    // Determine the order of day, month, year in the site's chosen date format.
    $format = variable_get('date_format_short', 'm/d/Y - H:i');
    $sort = array();
    $sort['day'] = max(strpos($format, 'd'), strpos($format, 'j'));
    $sort['month'] = max(strpos($format, 'm'), strpos($format, 'M'));
    $sort['year'] = strpos($format, 'Y');
    asort($sort);
    $order = array_keys($sort);

    // Output multi-selector for date.
    foreach ($order as $type) {
      switch ($type) {
        case 'year':
          $options = drupal_map_assoc(range(variable_get('WSN_yearsrangebegin', 2001), variable_get('WSN_yearsrangeend', 2012)));
          break;
        case 'month':
          $options = drupal_map_assoc(range(1, 12), 'map_month');
          break;
        case 'day':
          $options = drupal_map_assoc(range(1, 31));
          break;
      }
      if ($element['#withnull']) {
        $options = array('-1' => '-') + $options;
      }

      if (empty($element['#attributes'])) {
        $element['#attributes'] = array();
      }

      $parents = $element['#parents'];
      $parents[] = $type;
      $element[$type] = array(
        '#type' => 'select',
        '#value' => isset($element['#value'][$type]) ? $element['#value'][$type] : NULL,
        '#options' => $options,
        '#attributes' => array_merge(array('onchange' => "WSN_datext_tonull(this, '" . $element['#id'] . "')"), $element['#attributes']),
      );
    }
  }
  return $element;
}

/**
 * Validation for the dateext form element.
 */
function WSN_dateext_validate($element, &$form_state) {
  // value is a string, convert it back to array
  if (is_array($element['#value']) && isset($element['#value']['popup'])) {
    if (!$element['#withnull'] && empty($element['#value']['popup']['date'])) {
      form_set_error($element, t('Field %field is required.', array('%field' => !empty($element['#title']) ? $element['#title'] : '')));
    }
    if (preg_match('/(\d{4})-(\d{2})-(\d{2})/', $element['#value']['popup']['date'], $matches)) {
      $element['#value'] = array();
      $element['#value']['day'] = (int) $matches[3];
      $element['#value']['month'] = (int) $matches[2];
      $element['#value']['year'] = (int) $matches[1];
    }
    else {
      if (!$element['#withnull'] && !empty($element['#value']['popup']['date'])) {
        form_set_error($element, t('Wrong Format for Field %field. Format should be YYYY-MM-DD.', array('%field' => !empty($element['#title']) ? $element['#title'] : '')));
      }
      $element['#value'] = array('day' => -1, 'month' => -1, 'year' => -1);
    }
    form_set_value($element, $element['#value'], $form_state);
  }

  if ($element['#value']['day'] == -1 && !$element['#withnull']) {
    form_set_error($element, t('Field %field is required.', array('%field' => !empty($element['#title']) ? $element['#title'] : '')));
  }
  if ($element['#value']['day'] != -1 && !checkdate($element['#value']['month'], $element['#value']['day'], $element['#value']['year'])) {
    form_error($element, t('The specified date is invalid.'));
  }
  return $element;
}

/**
 * Converts a local timestamp to GMT.
 */
function _timestamp_to_gm($timestamp, $timezone=NULL) {
  if (!isset($timezone)) {
    global $user;
    if (variable_get('configurable_timezones', 1) && $user->uid && drupal_strlen($user->timezone)) {
      $timezone = $user->timezone;
    }
    else {
      $timezone = variable_get('date_default_timezone', 0);
    }
  }
  $timestamp -= $timezone;
  return $timestamp;
}

/**
 * Converts a date to a GMT timestamp.
 */
function _WSN_date_to_gmtimestamp($date, $timezone=NULL) {
  if ($date['month'] == -1 || $date['year'] == -1 || $date['day'] == -1) {
    return NULL;
  }
  else {
    $gmttimestamp = gmmktime(0, 0, 0, intval($date['month']), intval($date['day']), intval($date['year']));
    return _timestamp_to_gm($gmttimestamp, $timezone);
  }
}

/**
 * Converts a datetime to a GMT timestamp.
 */
function _WSN_datetime_to_gmtimestamp($datetime, $timezone=NULL) {
  $gmttimestamp = gmmktime(intval($datetime['hour']), intval($datetime['minute']), 0, intval($datetime['month']),
  intval($datetime['day']), intval($datetime['year']));
  return _timestamp_to_gm($gmttimestamp, $timezone);
}

/**
 * Converts a GMT timestamp to a datetime.
 */
function _WSN_gmtimestamp_to_datetime($timestamp, $timezone=NULL) {
  $datetime = array(
    'day' => format_date($timestamp, 'custom', 'j', $timezone),
    'month' => format_date($timestamp, 'custom', 'n', $timezone),
    'year' => format_date($timestamp, 'custom', 'Y', $timezone),
    'hour' => (int)format_date($timestamp, 'custom', 'H', $timezone),
    'minute' => (int)format_date($timestamp, 'custom', 'i', $timezone),
  );
  return $datetime;
}

/**
 * Converts a GMT timestamp to a date.
 */
function _WSN_gmtimestamp_to_date($timestamp, $timezone=NULL) {
  if ($timestamp) {
    $date = array(
      'day' => format_date($timestamp, 'custom', 'j', $timezone),
      'month' => format_date($timestamp, 'custom', 'n', $timezone),
      'year' => format_date($timestamp, 'custom', 'Y', $timezone),
    );
  }
  else {
    $date = array(
      'day' => -1,
      'month' => -1,
      'year' => -1,
    );
  }

  return $date;
}

/**
 * Converts a GMT Timestamp to a timestamp showing date only.
 */
function _WSN_gmtimestamp_without_time($timestamp, $timezone=NULL) {
  $date = _WSN_gmtimestamp_to_date($timestamp, $timezone);
  $gmttimestamp = gmmktime(0, 0, 0, $date['month'], $date['day'], $date['year']);
  return _timestamp_to_gm($gmttimestamp, $timezone);
}

/**
 * Converts a string to a time array.
 */
function _WSN_strtotime($timestr='') {
  $timestr = drupal_substr($timestr, 0, 5);
  $time = array();
  $time['hour'] = 0;
  $time['minute'] = 0;

  $ar = explode(':', $timestr);
  if (is_array($ar)) {
    if (array_key_exists(0, $ar)) $time['hour'] = $ar[0];
    if (array_key_exists(1, $ar)) $time['minute'] = $ar[1];
  }
  return $time;
}

/**
 * Converts a time array to a string.
 */
function _timetostr($time=array()) {
  $timestr = str_pad($time['hour'], 2, "0", STR_PAD_LEFT) . ':' . str_pad($time['minute'], 2, "0", STR_PAD_RIGHT);
  return $timestr;
}

/**
 * Calculates taxation for WSN nodes
 */
//function WSN_taxation(&$node) {
//  // If values are not set, then use default values
//  if (!isset($node->tax1app)) {
//    $node->tax1app = variable_get('WSN_tax1_app', 'none');
//  }
//  if (!isset($node->tax1percent)) {
//    $node->tax1percent = variable_get('WSN_tax1_percent', '20');
//  }
//  if (!isset($node->tax2app)) {
//    $node->tax2app = variable_get('WSN_tax2_app', 'none');
//  }
//  if (!isset($node->tax2percent)) {
//    $node->tax2percent = variable_get('WSN_tax2_percent', '20');
//  }
//
//  switch ($node->tax1app) {
//    case 0:
//      $node->tax1 = 0;
//      break;
//    case 1:
//      $node->tax1 = $node->amount * $node->tax1percent / 100;
//      break;
//    default:
//      // ERROR
//      drupal_set_message(t('Error during tax calculations (WSN module)'), 'error');
//  }
//
//  $node->subtotal = $node->amount + $node->tax1;
//
//  switch ($node->tax2app) {
//    case 0:
//      $node->tax2 = 0;
//      break;
//    case 1:
//      $node->tax2 = $node->amount * $node->tax2percent / 100;
//      break;
//    case 2:
//      $node->tax2 = $node->subtotal * $node->tax2percent / 100;
//      break;
//    default:
//      // ERROR
//      drupal_set_message(t('Error during tax calculations (WSN module)'), 'error');
//  }
//
//  $node->total = $node->subtotal + $node->tax2;
//}

/**
 * Provides an add icon for WSN nodes.
 */
function WSN_icon_add_node($node, $params=array()) {
  return WSN_icon_add('node/add/' . $node->type, $params);
}

/**
 * Provides an edit icon for WSN nodes.
 */
function WSN_icon_edit_node($node, $params=array()) {
  return WSN_icon_edit('node/' . $node->nid . '/edit', $params);
}

/**
 * Provides a delete icon for WSN nodes.
 */
function WSN_icon_delete_node($node, $params=array()) {
  return WSN_icon_delete('node/' . $node->nid . '/delete', $params);
}

/**
 * Provides a WSN add icon.
 */
function WSN_icon_add($path, $params=array()) {
  $attributes = array('class' => 'popups-form');
  return WSN_icon_l('application_add', $path, t('Add'), $params, $attributes);
}

/**
 * Provides a WSN edit icon.
 */
function WSN_icon_edit($path, $params=array()) {
  $attributes = array('class' => 'popups-form');
  return WSN_icon_l('application_edit', $path, t('Edit'), $params, $attributes);
}

/**
 * Provides a WSN delete icon.
 */
function WSN_icon_delete($path, $params=array()) {
  $attributes = array('class' => 'popups-form');
  return WSN_icon_l('application_delete', $path, t('Delete'), $params, $attributes);
}

/**
 * Provides an icon link.
 */
function WSN_icon_l($icon, $path, $title, $params=array(), $attributes=array()) {
  if (!drupal_valid_path($path)) {
    return '';
  }
  $icon = WSN_icon($icon, $title);
  $attributes ['title'] = $title;

  $query = '';

  if (array_key_exists('q', $params)) {
    $destination = $params['q'];
    unset($params['q']);
    $c = 0;
    if (array_key_exists('page', $params)) {
      $destination .= '?page=' . $params['page'];
      unset($params['page']);
      $c++;
    }
    if (array_key_exists('sort', $params)) {
      if ($c) {
        $destination .= '&';
      }
      else {
        $destination .= '?';
      }
      $destination .= 'sort=' . $params['sort'];
      unset($params['sort']);
      $c++;
    }
    if (array_key_exists('order', $params)) {
      if ($c) {
        $destination .= '&';
      }
      else {
        $destination .= '?';
      }
      $destination .= 'order=' . $params['order'];
      unset($params['order']);
      $c++;
    }
    $query .= 'destination=' . urlencode($destination);
    unset($params['destination']);
  }

  $params = _WSN_icon_urlencode_helper($params);
  foreach ($params as $key => $value) {
    if ($query) $query .= '&';
    $query .= $key . '=' . urlencode($value);
  }

  $o = l($icon, $path, array('attributes' => $attributes, 'html' => TRUE)); // @TODO add back query
  return $o;
}

/**
 * Encodes URL for icon links.
 */
function _WSN_icon_urlencode_helper($params, $org_key = "") {
  $new_params = array();
  foreach ($params as $key => $value) {
    if (!empty($org_key)) {
      $new_key = $org_key . "[" . $key . "]";
    }
    else {
      $new_key = $key;
    }
    if (is_array($value)) {
      $new_params = array_merge(_WSN_icon_urlencode_helper($value, $new_key), $new_params);
    }
    else {
      $new_params[$new_key] = $value;
    }
  }
  return $new_params;
}

/**
 * Provides a WSN icon.
 */
function WSN_icon($icon, $title) {
  // Running checkplain on these variables means that we can call WSN_icon without further sanitising
  $icon = check_plain($icon);
  $title = check_plain($title);

  $icon = str_replace(' ', '_', $icon);

  if (variable_get('WSN_icons_display', TRUE) == TRUE) {
    $available = cache_get('WSN:icons');
    if (!is_object($available)) {
      // Cache miss
      $available = WSN_icon_recache();
    }

    // Normal situation - display icon image
    if (in_array($icon . '.png', $available->data)) {
      // Construct path relative to folder stored in settings
      $img_src = variable_get('WSN_icons_path', drupal_get_path('module', 'WSN') . '/icons') . '/' . $icon . '.png';
      // Return the icon
      return theme('image', array(
        'path' => $img_src,
        'alt' => $title,
        'title' => $title,
      ));
    }
    else {
      // Icon not found
      return WSN_icon_default($icon, $title);
    }
  }
  else {
    // Icons set to not display
    return $title;
  }
}

/**
 * Forces a recache of WSN icons.
 */
function WSN_icon_recache() {
  $available = array();

  $dir = variable_get('WSN_icons_path', drupal_get_path('module', 'WSN') . '/icons');

  $files = scandir($dir);
  foreach ($files as $file) {
    $available[] = $file;
  }

  cache_set('WSN:icons', $available, 'cache', CACHE_TEMPORARY);
  $available = cache_get('WSN:icons');
  return $available;
}

/**
 * Provides a default icon to avoid missing icons.
 */
function WSN_icon_default($icon, $title) {
  // For now, just return $title.
  // A future extension could be more intelligent using $icon.
  return $title;
}

/**
 * Get a list of people and teams for select boxes
 *
 * Params:
 *  $nodes_nid
 *    Leave blank to get a list of all teams and persons, otherwise also provide
 *  $project_nid
 *    to get a limited list of teams and persons following the following logic:
 *    - If the project is assigned to a person, only that person is listed as an option
 *    - If the project is assigned to a team, all team members are listed as options
 *    - If the project is neither assigned to a person nor a team, all people that are
 *      assigned to the given origanization are listed as options
 *    - In addition, if the project is assigned to a manager, that person is also listed
 *    - Finally, look into all existing teams and list those teams that exclusively
 *      contain members that are already selected
 *    If $nodes_nid is provided but $project_nid is omitted, then the logic is as
 *    above, just for all projects of the given nodes.
 */
//function WSN_get_assignment_options($nodes_nid = 0, $project_nid = 0) {
//  $teams = t('Teams:');
//  $people = t('People:');
//  $options = array();
//  if (!$nodes_nid) {
//    $options['all'] = t('- no filter -');
//    $options['mine'] = t('- mine -');
//  }
//  $options[0] = t('- unassigned -');
//  if (module_exists('WSNteam')) {
//    $options[$teams] = array();
//  }
//  if (module_exists('WSNperson')) {
//    $options[$people] = array();
//  }
//  $add_org_people = TRUE;
//  if ($nodes_nid) {
//    $add_org_people = FALSE;
//    $manager = array();
//    $projects = array();
//    if ($project_nid) {
//      $projects[] = $project_nid;
//    }
//    else {
//      $query = db_select('node', 'n');
//      $query->join('WSNsensors', 'pro', 'n.vid = pro.vid');
//      $query
//        ->fields('n', array('nid'))
//        ->condition('n.status', 1)
//        ->condition('n.type', 'WSNsensors')
//        ->condition('pro.nodes_nid', $nodes_nid)
//        ->addTag('node_access');
//      $result = $query->execute();
//
//      foreach ($result as $project) {
//        $projects[] = $project->nid;
//      }
//      $add_org_people = TRUE;
//    }
//    foreach ($projects as $pid) {
//      $project = node_load($pid);
//      if ($project->manager_nid) {
//        $manager[] = node_load($project->manager_nid);
//      }
//      if ($project->assigned_nid) {
//        $node = node_load($project->assigned_nid);
//        if ($node->type == 'WSNperson') {
//          if (module_exists('WSNperson')) {
//            $options[$people][$node->nid] = check_plain($node->title);
//          }
//        }
//        else { // ($node->type == 'WSNteam')
//          if (module_exists('WSNteam')) {
//            $options[$teams][$node->nid] = check_plain($node->title);
//            foreach ($node->members_array as $nid => $name) {
//              // do not add deactivated persons
//              if (!array_key_exists($nid, $node->members_deactivated_array)) {
//                $options[$people][$nid] = check_plain($name);
//              }
//            }
//          }
//        }
//      }
//      else {
//        $add_org_people = TRUE;
//      }
//    }
//  }
//  if ($add_org_people) {
//    if (module_exists('WSNperson')) {
//      $query = db_select('node', 'n');
//      $query->join('WSNperson', 'per', 'n.vid = per.vid');
//      $query
//        ->fields('n', array('title'))
//        ->fields('per', array('nid'))
//        ->addTag('node_access')
//        ->orderBy('title', 'ASC');
//
//      if (isset($nodes_nid) && $nodes_nid != 0) {
//        $query->condition('per.nodes_nid', $nodes_nid);
//      }
//
//      $result = $query->execute();
//
//      foreach ($result as $person) {
//        $options[$people][$person->nid] = check_plain($person->title);
//        if (empty($options[$people][$person->nid])) {
//          $options[$people][$person->nid] = t('Person !nid', array('!nid' => $person->nid));
//        }
//      }
//    }
//  }
//  else {
//    if (isset($manager) && module_exists('WSNperson')) {
//      foreach ($manager as $manager_node) {
//        if (!array_key_exists($manager_node->nid, $options[$people])) {
//          $options[$people][$manager_node->nid] = check_plain($manager_node->title);
//        }
//      }
//    }
//  }
//  if (module_exists('WSNteam')) {
//    $query = db_select('node', 'n');
//    $query->join('WSNteam', 'team', 'n.vid = team.vid');
//    $query
//      ->fields('n', array('nid', 'vid', 'title'))
//      ->condition('n.type', 'WSNteam')
//      ->addTag('node_access')
//      ->groupBy('team.nid')
//      ->orderBy('title', 'ASC');
//
//    // Do not add teams, which we have already added
//    if (!empty($options[$teams])) {
//      $query->condition('team.nid', $options[$teams], 'NOT IN');
//    }
//    // Only add teams that have at least the same members as persons we added so far
//    if (!empty($nodes_nid) && !empty($options[$people])) {
//      // Add all persons that should be in the team
//      $query->condition('team.mnid', $options[$people], 'IN');
//      // Add a count, how many of the given persons should be in the other teams
//      $count = count($options[$people]);
//      $query->having('count(team.nid) = :count', array(':count' => $count));
//    }
//    $result = $query->execute();
//    foreach ($result as $team) {
//      $options[$teams][$team->nid] = check_plain($team->title);
//    }
//  }
//  if (isset($options[$people]) && array_key_exists(0, $options[$people])) {
//    unset($options[$people][0]);
//  }
//  if (isset($options[$teams]) && array_key_exists(0, $options[$teams])) {
//    unset($options[$teams][0]);
//  }
//  if (isset($options[$people]) && !sizeof($options[$people])) {
//    unset($options[$people]);
//  }
//  if (isset($options[$teams]) && !sizeof($options[$teams])) {
//    unset($options[$teams]);
//  }
//
//  // SORT OPTIONS
//  if (!empty($options[$people]) && is_array($options[$people])) {
//    asort($options[$people], SORT_LOCALE_STRING);
//  }
//  if (!empty($options[$teams]) && is_array($options[$teams])) {
//    asort($options[$teams], SORT_LOCALE_STRING);
//  }
//
//  return $options;
//}

/**
 * Helper function to count nodes of type destination module with parent nid of type source module.
 *
 * @param string $source_module
 *   A string of module where the request is comming from
 * @param string $destination_module
 *   A string with name of targeted module
 * @param int $nid
 *   Node id of source module
 * @return ''|int
 *   empty string if can't be counted or the count of destination nodes in source node
 * @see theme_WSN_link()
 */
function _WSN_number_of_items($source_module, $destination_module, $nid) {
  global $user;
  $nmb_of_items = '';

  $valid_destination_modules = array();
  switch ($source_module) {
    case "WSNsites":
      $column_name = 'sites_nid';
      $valid_destination_modules = array('WSNnodes', 'WSNsensors', 'WSNobservations');
      break;
    
    case "WSNnodes":
      $column_name = 'nodes_nid';
      $valid_destination_modules = array('WSNsensors', 'WSNobservations');
      break;

    case "WSNsensors":
      $column_name = 'sensors_nid';
      $valid_destination_modules = array('WSNobservations');
      break;

    case "WSNobservations":
      $column_name = 'observations_nid';
      $valid_destination_modules = array();
      break;
  }

  if (in_array($destination_module, $valid_destination_modules)) {
    switch ($destination_module) {
     case 'WSNnodes':
        $sql = "SELECT COUNT(*) FROM {node} AS n INNER JOIN {WSNnodes} AS spr ON n.vid=spr.vid WHERE n.status=1 AND
                n.type='WSNnodes' and spr." . $column_name . " = %d";
        break;
       case 'WSNsensors':
        $sql = "SELECT COUNT(*) FROM {node} AS n INNER JOIN {WSNsensors} AS spr ON n.vid=spr.vid WHERE n.status=1 AND
                n.type='WSNsensors' and spa." . $column_name . " = %d";
        break;
      case 'WSNobservations':
        $sql = "SELECT COUNT(*) FROM {node} AS n INNER JOIN {WSNobservations} AS sta ON n.vid=sta.vid WHERE n.status=1 AND
                n.type='WSNobservations' and sti." . $column_name . " = %d";
        break;
    }
    // @todo Convert to DBTNG
    // ->addTag('node_access')
    $nmb_of_items = db_result(db_query($sql, $nid));
  }
  return $nmb_of_items;
}

/**
 * Provides attributes in a specified domain.
 */
function WSN_attributes_bydomain($domain) {
  static $attributes_cache = array();
  $attributes = array();

  if (array_key_exists($domain, $attributes_cache)) return $attributes_cache[$domain];

  $query = db_select('WSNattribute', 'sa')
    ->fields('sa')
    ->condition('sa.isactive', 1)
    ->condition('sa.domain', $domain, 'LIKE')
//    ->where("lower(domain) like lower(':domain')", array(':domain' => $domain))
    ->orderBy('weight', 'ASC')
    ->orderBy('avalue', 'ASC');

  $result = $query->execute();

  $attributes['values'] = array();
  foreach ($result as $attribute) {
    // The variable is deliberately passed through t() for translatability
    $attributes['values'][$attribute->akey] = t($attribute->avalue);
    if ($attribute->isdefault) {
      $attributes['default'] = $attribute->akey;
    }
  }
  if (is_array($attributes['values']) && !array_key_exists('default', $attributes)) {
    $v = array_flip($attributes['values']);
    $attributes['default'] = array_shift($v);
  }

  $attributes_cache[$domain] = $attributes;

  return $attributes;
}

/**
 * Provides attribute value for a given domain and key.
 */
function WSN_attribute_value($domain, $key) {
  $attributes_array = WSN_attributes_bydomain($domain);
  $attributes = $attributes_array['values'];
  if (array_key_exists($key, $attributes)) {
    return $attributes[$key];
  }
  return $key;
}
