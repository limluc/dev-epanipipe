<?php

/**
 * @file
 */

/**
 * Implements hook_help().
 */
function pmproject_help($path, $arg) {
  $o = '';

  switch ($path) {
    case "admin/help#pmproject":
      $o = '<p>' . t("Provides project support for Project Management") . '</p>';
      break;
  }

  return $o;
}

/**
 * Implements hook_permission().
 */
function pmproject_permission() {
  return array(
    'Project Management Project: access' => array(
      'title' => t('Access Project Management Project'),
    ),
    'Project Management Project: add' => array(
      'title' => t('Add Project Management Projects'),
    ),
    'Project Management Project: delete all' => array(
      'title' => t('Delete Any Project Management Project'),
    ),
    'Project Management Project: delete own' => array(
      'title' => t('Delete Authored Project Management Projects'),
    ),
    'Project Management Project: delete of user organization' => array(
      'title' => t('Delete Project Management Projects in own Organization'),
    ),
    'Project Management Project: delete if project manager' => array(
      'title' => t('Delete Project Management Project if project manager'),
    ),
    'Project Management Project: delete if assigned to project' => array(
      'title' => t('Delete Project Management Project if assigned to project'),
    ),
    'Project Management Project: edit all' => array(
      'title' => t('Edit Any Project Management Project'),
    ),
    'Project Management Project: edit own' => array(
      'title' => t('Edit Authored Project Management Projects'),
    ),
    'Project Management Project: edit of user organization' => array(
      'title' => t('Edit Project Management Project in own Organization'),
    ),
    'Project Management Project: edit if project manager' => array(
      'title' => t('Edit Project Management Project if project manager'),
    ),
    'Project Management Project: edit if assigned to project' => array(
      'title' => t('Edit Project Management Project if assigned to project'),
    ),
    'Project Management Project: view all' => array(
      'title' => t('View Any Project Management Project'),
    ),
    'Project Management Project: view own' => array(
      'title' => t('View Authored Project Management Project'),
    ),
    'Project Management Project: view of user organization' => array(
      'title' => t('View Project Management Project in own Organization'),
    ),
    'Project Management Project: view if project manager' => array(
      'title' => t('View Project Management Project if project manager'),
    ),
    'Project Management Project: view if assigned to project' => array(
      'title' => t('View Project Management Project if assigned to project'),
    ),
  );
}

/**
 * Implements hook_node_access().
 */
function pmproject_node_access($node, $op, $account = NULL) {
  $type = is_string($node) ? $node : $node->type;
  if ($type == 'pmproject') {
    // If no account is specified, assume that the check is against the current logged in user
    if (is_null($account)) {
      global $user;
      $account = $user;
    }
    if ($op == 'create' AND user_access('Project Management Project: add', $account)) {
      return NODE_ACCESS_ALLOW;
    }
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_menu().
 */
function pmproject_menu() {
  $items = array();

  $items['pm/organization_projects_js/%'] = array(
    'title' => 'Projects',
    'page callback' => '_pmproject_organization_projects_js',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'file' => 'pmproject.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/pm/project'] = array(
    'title' => 'PM Project',
    'description' => 'Administer Project Management Project.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pmproject_admin_settings'),
    'access arguments' => array('Project Management: access administration pages'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function pmproject_theme() {
  return array(
    'pmproject_view' => array(
      'file'      => 'pmproject.theme.inc',
      'variables' => array('node', 'view_mode'),
    ),
  );
}

/**
 * Implements hook_node_info().
 */
function pmproject_node_info() {
  return array(
    'pmproject' => array(
      'name' => t('Project'),
      'base' => 'pmproject',
      'description' => t("A project for Project Management."),
      'title_label' => t("Title"),
      'body_label' => t("Description"),
    )
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function pmproject_field_extra_fields() {
  $extra['node']['pmproject'] = array(
    'form' => array(
      'group1' => array(
        'label' => 'Organization',
        'weight' => -20,
      ),
      'group2' => array(
        'label' => 'Category/Status/Priority Group',
        'weight' => -19,
      ),
      'group3' => array(
        'label' => 'Date/Duration Group',
        'weight' => -18,
      ),
      'group4' => array(
        'label' => 'Price Group',
        'weight' => -17,
      ),
      'group5' => array(
        'label' => 'Manager / Assigned to Group',
        'weight' => -16,
      ),
      'group6' => array(
        'label' => 'Billable / Billed Group',
        'weight' => -15,
      ),
    ),
  );
  return $extra;
}

/**
 * Implements hook_field_extra_fields_alter().
 */
function pmproject_field_extra_fields_alter(&$info) {
  $info['node']['pmproject']['form']['title']['weight'] = -21;
}

/**
 * Implements hook_pmorganization_change().
 */
function pmproject_pmorganization_change($organization_nid, $organization_title) {
  db_update('pmproject')
    ->fields(array('organization_title' => $organization_title))
    ->condition('organization_nid', $organization_nid)
    ->execute();
}

/**
 * Implements hook_pmperson_change().
 */
function pmproject_pmperson_change($person_nid, $person_title) {
  // Manager field
  db_update('pmproject')
    ->fields(array('manager_title' => $person_title))
    ->condition('manager_nid', $person_nid)
    ->execute();

  // Assigned field
  db_update('pmproject')
    ->fields(array('assigned_title' => $person_title))
    ->condition('assigned_nid', $person_nid)
    ->execute();
}

/**
 * Implements hook_form().
 */
function pmproject_form(&$node) {
  $breadcrumb = array();
  $breadcrumb[] = l(t('Project Management'), 'pm');
  $breadcrumb[] = l(t('Projects'), 'pm/projects');
  drupal_set_breadcrumb($breadcrumb);

  if (arg(1)=='add') {
    $node->datebegin = time();
    $node->dateend = time();

    if (array_key_exists('organization_nid', $_GET) && !$node->organization) {
      $node->organization_nid = $_GET['organization_nid'];
    }
    if (isset($_SESSION['pmproject_list_filter']['organization_nid']) && !$node->organization_nid) {
      $node->organization_nid = $_SESSION['pmproject_list_filter']['organization_nid'];
    }
    $org_query = db_select('node', 'n');
    $org_query->join('pmorganization', 'sor', 'n.vid = sor.vid');
    $org_query
      ->fields('n', array('nid', 'title'))
      ->condition('n.status', 1)
      ->condition('n.type', 'pmorganization')
      ->condition('sor.isactive', 1)
      ->addTag('node_access')
      ->orderBy('n.title', 'ASC');

    $node->billable = variable_get('pmproject_billable_default', FALSE);

  }
  else {
    $org_query = db_select('node', 'n');
    $org_query->join('pmorganization', 'sor', 'n.vid = sor.vid');
    $org_query
      ->fields('n', array('nid', 'title'))
      ->condition('n.status', 1)
      ->condition('n.type', 'pmorganization')
      ->addTag('node_access')
      ->orderBy('n.title', 'ASC');
  }

  $type = node_type_get_type($node);
  $info = field_info_extra_fields('node', 'pmproject', 'form');

  $form['#attributes']['class'] = 'pmcomponent_node_form';

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#weight' => $info['title']['weight'],
  );

  $form['group1'] = array(
    '#type' => 'markup',
    '#theme' => 'pm_form_group',
    '#weight' => $info['group1']['weight'],
  );

  $org_result = $org_query->execute();
  $organizations = array();
  foreach ($org_result as $organization) {
    $organizations[$organization->nid] = $organization->title;
    if (!isset($node->organization_nid)) $node->organization_nid = $organization->nid;
  }
  if (!isset($node->organization_nid)) {
    drupal_set_message(t('Please add an orgnization to the system before trying to add a project.'), 'error');
  }
  $form['group1']['organization_nid'] = array(
    '#type' => 'select',
    '#title' => t('Organization'),
    '#options' => $organizations,
    '#default_value' => isset($node->organization_nid) ? $node->organization_nid : NULL,
  );

  $form['group1']['organization_nid_old'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($node->organization_nid) ? $node->organization_nid : NULL,
  );

  $form['group2'] = array(
    '#type' => 'markup',
    '#theme' => 'pm_form_group',
    '#weight' => $info['group2']['weight'],
  );

  $category_list = pm_attributes_bydomain('Project category');
  $form['group2']['projectcategory'] = array(
    '#type' => 'select',
    '#title' => t('Category'),
    '#default_value' => $node->projectcategory,
    '#options' => $category_list['values'],
  );

  $status_list = pm_attributes_bydomain('Project status');
  $form['group2']['projectstatus'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#default_value' => $node->projectstatus,
    '#options' => $status_list['values'],
  );

  $priority_list = pm_attributes_bydomain('Project priority');
  $form['group2']['projectpriority'] = array(
    '#type' => 'select',
    '#title' => t('Priority'),
    '#default_value' => $node->projectpriority,
    '#options' => $priority_list['values'],
  );

  $form['group3'] = array(
    '#type' => 'markup',
    '#theme' => 'pm_form_group',
    '#weight' => $info['group3']['weight'],
  );

  $form['group3']['datebegin'] = array(
    '#type' => 'dateext',
    '#title' => t('Date begin'),
    '#withnull' => TRUE,
    '#default_value' => $node->datebegin,
  );

  $form['group3']['dateend'] = array(
    '#type' => 'dateext',
    '#title' => t('Date end'),
    '#withnull' => TRUE,
    '#default_value' => $node->dateend,
  );

  $durationunit_list = pm_attributes_bydomain('Duration unit');
  $form['group3']['durationunit'] = array(
    '#type' => 'select',
    '#title' => t('Duration unit'),
    '#default_value' => $node->durationunit,
    '#options' => $durationunit_list['values'],
  );

  $form['group3']['duration'] = array(
    '#type' => 'textfield',
    '#title' => t('Duration'),
    '#size' => 20,
    '#default_value' => isset($node->duration) ? $node->duration : NULL,
  );

  $form['group4'] = array(
    '#type' => 'markup',
    '#theme' => 'pm_form_group',
    '#weight' => $info['group4']['weight'],
  );

  $pricemode_list = pm_attributes_bydomain('Price mode');
  $form['group4']['pricemode'] = array(
    '#type' => 'select',
    '#title' => t('Price mode'),
    '#default_value' => $node->pricemode,
    '#options' => $pricemode_list['values'],
  );

  $form['group4']['price'] = array(
    '#title' => t('Price'),
    '#type' => 'textfield',
    '#size' => 15,
    '#default_value' => isset($node->price) ? $node->price : NULL,
  );

  $currency_list = pm_attributes_bydomain('Currency');
  $form['group4']['currency'] = array(
    '#type' => 'select',
    '#title' => t('Price currency'),
    '#default_value' => $node->currency,
    '#options' => $currency_list['values'],
  );

  $form['group5'] = array(
    '#type' => 'markup',
    '#theme' => 'pm_form_group',
    '#weight' => $info['group5']['weight'],
  );

  if (module_exists('pmperson')) {
    $per_query = db_select('node', 'n');
    $per_query->join('pmperson', 'spe', 'n.vid = spe.vid');
    $per_result = $per_query
      ->fields('n', array('nid', 'title'))
      ->condition('n.type', 'pmperson')
      ->orderBy('n.title', 'ASC')
      ->addTag('node_access')
      ->execute();

    $people = array();
    foreach ($per_result as $person) {
      $people[$person->nid] = $person->title;
    }

    $options = array(0 => '- none -', 'People:' => $people);
  }
  else {
    $options = array(0 => '- none -');
  }

  $form['group5']['manager_nid'] = array(
    '#type' => module_exists('pmperson') ? 'select' : 'hidden',
    '#title' => t('Project manager'),
    '#options' => $options,
    '#default_value' => isset($node->manager_nid) ? $node->manager_nid : 0,
  );

  if (module_exists('pmteam')) {
    $team_query = db_select('node', 'n');
    $team_query->join('pmteam', 'ste', 'n.vid = ste.vid');
    $team_result = $team_query
      ->fields('n', array('nid', 'title'))
      ->condition('n.type', 'pmperson')
      ->orderBy('n.title', 'ASC')
      ->addTag('node_access')
      ->execute();

    $teams = array();
    foreach ($team_result as $team) {
      $teams[$team->nid] = $team->title;
    }

    $options = array(0 => '- unassigned -', 'Teams:' => $teams, 'People:' => $people);
  }
  else {
    $options = array(0 => '- unassigned -');
  }

  $form['group5']['assigned_nid'] = array(
    '#type' => module_exists('pmperson') ? 'select' : 'hidden',
    '#title' => t('Assigned to'),
    '#options' => $options,
    '#default_value' => isset($node->assigned_nid) ? $node->assigned_nid : 0,
  );

  $form['group6'] = array(
    '#type' => 'markup',
    '#theme' => 'pm_form_group',
    '#weight' => $info['group6']['weight'],
  );

  $form['group6']['billable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Billable'),
    '#default_value' => isset($node->billable) ? $node->billable : 0,
    '#weight' => 1,
  );

  $form['group6']['billed'] = array(
    '#type' => 'checkbox',
    '#title' => t('Billed'),
    '#default_value' => isset($node->billed) ? $node->billed : 0,
    '#weight' => 2,
  );

  // Check to see if the body field is still there, if so, display it.
  $body = field_get_items('pmproject', $node, 'body');
  if ($body) {
    $form['body_field'] = $body;
  }

  $form['title_old'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($node->title_old) ? $node->title_old : NULL,
  );

  return $form;
}

/**
 * Implements hook_insert().
 */
function pmproject_insert($node) {
  _pmproject_beforesave($node);

  $org_result = db_select('node', 'n')
    ->fields('n', array('title'))
    ->condition('n.type', 'pmorganization')
    ->condition('n.nid', $node->organization_nid)
    ->execute();
  $organization = $org_result->fetchObject();

  $per_result = db_select('node', 'n')
    ->fields('n', array('title'))
    ->condition('n.type', 'pmperson')
    ->condition('n.nid', $node->manager_nid)
    ->execute();
  $manager = $per_result->fetchObject();
  if (!$manager) {
    $manager = new stdClass();
    $manager->title = '';
  }

  $assigned = node_load($node->assigned_nid);
  if (!$assigned) {
    $assigned = new stdClass();
    $assigned->title = '';
  }

  db_insert('pmproject')
    ->fields(array(
      'vid' => $node->vid,
      'nid' => $node->nid,
      'organization_nid' => $node->organization_nid,
      'organization_title' => $organization->title,
      'projectcategory' => $node->projectcategory,
      'projectstatus' => $node->projectstatus,
      'projectpriority' => $node->projectpriority,
      'pricemode' => $node->pricemode,
      'price' => $node->price,
      'currency' => $node->currency,
      // 'datebegin' => $node->datebegin,
      // 'dateend' => $node->dateend,
      'durationunit' => $node->durationunit,
      'duration' => $node->duration,
      'manager_nid' => $node->manager_nid,
      'manager_title' => $manager->title,
      'assigned_nid' => $node->assigned_nid,
      'assigned_title' => $assigned->title,
      'billable' => $node->billable,
      'billed' => $node->billed,
    ))
    ->execute();
}

/**
 * Implements hook_update().
 */
function pmproject_update($node) {
  _pmproject_beforesave($node);

  // This code needs to run whether or not revisions are being used
  $org_result = db_select('node', 'n')
    ->fields('n', array('title'))
    ->condition('n.type', 'pmorganization')
    ->condition('n.nid', $node->organization_nid)
    ->execute();
  $organization = $org_result->fetchObject();

  // If the project has been moved to a different organization, all nodes that reference the project should be updated.
  if ($node->organization_nid != $node->organization_nid_old) {
    module_invoke_all('pmproject_change_hierarchy', $node->nid, $node->organization_nid, $organization->title);
  }

  // If this is a new node or we're adding a new revision,
  if ($node->revision) {
    pmproject_insert($node);
  }
  else {
    $per_result = db_select('node', 'n')
      ->fields('n', array('title'))
      ->condition('n.type', 'pmperson')
      ->condition('n.nid', $node->manager_nid)
      ->execute();
    $manager = $per_result->fetchObject();
    if (!$manager) {
      $manger = new stdClass();
      $manager->title = '';
    }

    $assigned = node_load($node->assigned_nid);
    if (!$assigned) {
      $assigned = new stdClass();
      $assigned->title = '';
    }

    db_update('pmproject')
      ->fields(array(
        'nid' => $node->nid,
        'organization_nid' => $node->organization_nid,
        'organization_title' => $organization->title,
        'projectcategory' => $node->projectcategory,
        'projectstatus' => $node->projectstatus,
        'projectpriority' => $node->projectpriority,
        'pricemode' => $node->pricemode,
        'price' => $node->price,
        'currency' => $node->currency,
        // 'datebegin' => $node->datebegin,
        // 'dateend' => $node->dateend,
        'durationunit' => $node->durationunit,
        'duration' => $node->duration,
        'manager_nid' => $node->manager_nid,
        'manager_title' => $manager->title,
        'assigned_nid' => $node->assigned_nid,
        'assigned_title' => $assigned->title,
        'billable' => $node->billable,
        'billed' => $node->billed,
      ))
      ->condition('vid', $node->vid)
      ->execute();

    if ($node->title != $node->title_old) {
      module_invoke_all('pmproject_change', $node->nid, $node->title);
    }
  }
}

/**
 * Prepare node data before saving it to the database.
 */
function _pmproject_beforesave(&$node) {
  // Allow use of comma when inputting numerical values - str_replace with period decimal
  $node->duration = str_replace(',', '.', $node->duration);
  $node->price = str_replace(',', '.', $node->price);
  if (!is_numeric($node->duration)) {
    $node->duration = 0;
  }
  if (!is_numeric($node->price)) {
    $node->price = 0;
  }

  if (is_array($node->datebegin)) {
      $node->datebegin = _pm_date_to_gmtimestamp($node->datebegin);
  }
  elseif (is_string($node->datebegin)) {
      $node->datebegin = strtotime($node->datebegin);
  }

  if (is_array($node->dateend)) {
      $node->dateend = _pm_date_to_gmtimestamp($node->dateend);
  }
  elseif (is_string($node->dateend)) {
      $node->dateend = strtotime($node->dateend);
  }
}

/**
 * Implements hook_node_prepare().
 */
function pmproject_node_prepare($node) {
  if (!isset($node->nid)) {
    $category_list = pm_attributes_bydomain('Project category');
    $node->projectcategory = $category_list['default'];

    $status_list = pm_attributes_bydomain('Project status');
    $node->projectstatus = $status_list['default'];

    $priority_list = pm_attributes_bydomain('Project priority');
    $node->projectpriority = $priority_list['default'];

    $durationunit_list = pm_attributes_bydomain('Duration unit');
    $node->durationunit = $durationunit_list['default'];

    $pricemode_list = pm_attributes_bydomain('Price mode');
    $node->pricemode = $pricemode_list['default'];

    $currency_list = pm_attributes_bydomain('Currency');
    $node->currency = $currency_list['default'];
  }
}

/**
 * Implements hook_node_revision_delete().
 */
function pmproject_node_revision_delete($node) {
  // Notice that we're matching a single revision based on the node's vid.
  db_delete('pmproject')
    ->condition('vid', $node->vid)
    ->execute();
}

/**
 * Implements hook_delete().
 */
function pmproject_delete($node) {
  // Notice that we're matching all revision, by using the node's nid.
  db_delete('pmproject')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_load().
 */
function pmproject_load($nodes) {
  foreach ($nodes as $nid => &$node) {
    $result = db_select('pmproject', 'spr')
      ->fields('spr')
      ->condition('spr.vid', $node->vid)
      ->execute();
    $record = $result->fetchAssoc();

    foreach ($record as $key => $value) {
      $node->$key = $value;
    }

    $node->title_old = $node->title;
  }
}

/**
 * Implements hook_view().
 */
function pmproject_view($node, $view_mode) {
  $breadcrumb = array();
  $breadcrumb[] = l(t('Project Management'), 'pm');
  $breadcrumb[] = l(t('Projects'), 'pm/projects');
  drupal_set_breadcrumb($breadcrumb);

  return theme('pmproject_view', array('node' => $node, 'view_mode' => $view_mode));
}

/**
 * Implements hook_views_api().
 */
function pmproject_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'pmproject'),
  );
}

/**
 * Admin settings form for pmproject module
 */
function pmproject_admin_settings() {
  $form = array();

  $form['pmproject_billable_default'] = array(
    '#type' => 'checkbox',
    '#title' => t('Default Value for billable field.'),
    '#default_value' => variable_get('pmproject_billable_default', FALSE),
    '#description' => t('When checked, Project Management will set the project to billable by default'),
    '#size' => 5,
  );

  return system_settings_form($form);
}

/**
 * Handler to automatically add projects to an invoice.
 */
function pmproject_pminvoice_auto_add($node, $invoice_nid = NULL) {
  if (!module_exists('pminvoice')) {
    drupal_set_message(t('This function should only be called from within Project Management Invoice'));
    return;
  }
  elseif ($node->billed) {
    drupal_set_message(t('This project has already been billed!'));
    return;
  }
  elseif (!$node->billable) {
    drupal_set_message(t('This project is marked unbillable!'));
    return;
  }
  else {
    global $user;

    if (!$invoice_nid) {

      $new_invoice = new StdClass;

      // Code copied with edits from node form
      $new_invoice->requestdate = time();
      $new_invoice->duedate = $new_invoice->requestdate + (variable_get('pminvoice_payment_days', 30) * 86400);
      $new_invoice->number = pminvoice_get_invoice_number($new_invoice->requestdate);

      $new_invoice->title = $node->title;
      $new_invoice->uid = $user->uid;
      $new_invoice->type = 'pminvoice';
      // $new_invoice->reference
      $new_invoice->organization_nid = $node->organization_nid;
      $new_invoice->organization_title = $node->organization_title;
      $new_invoice->project_nid = $node->nid;
      $new_invoice->project_title = $node->title;
      // $new_invoice->amount
      // $new_invoice->tax
      // $new_invoice->total
      // $new_invoice->totalcustomercurr
      // $new_invoice->taxexempt
      $new_invoice->src_nid = $node->nid;
      $new_invoice->src_vid = $node->vid;

      node_save($new_invoice);
      $invoice_nid = $new_invoice->nid;
    }
    else {
      $new_invoice = node_load($invoice_nid);
    }

    $rate_array = array('pricemode_used' => '', 'rate_to_use' => 0);

    $rate_array = pminvoice_get_rate($node);

    $count = count($new_invoice->items);

    $new_invoice->items[$count]->description = pminvoice_get_item_desc($rate_array, $node);

    $new_invoice->items[$count]->amount = pminvoice_get_item_amount($rate_array, $node);

    // Tax percent simply uses default at the moment
    $new_invoice->items[$count]->tax1percent = variable_get('pm_tax1_percent', 20);
    // $new_invoice_item->items[$count]->tax1
    // $new_invoice_item->items[$count]->total
    $new_invoice->items[$count]->src_nid = $node->nid;
    $new_invoice->items[$count]->src_vid = $node->vid;

    pm_taxation($new_invoice->items[$count]);
    pminvoice_update($new_invoice);
  }

  // Mark project as billed.
  db_query("UPDATE {pmproject} SET billed=%d WHERE vid=%d", 1, $node->vid);

  return $invoice_nid;
}

/**
 * Implements hook_token_list().
 */
function pmproject_token_list($type='all') {
  $tokens = array();
  if (($type == 'node') || ($type == 'all')) {
    $tokens['node']['pmproject-projectstatus'] = t('Project Management Project: Project Status.');
    $tokens['node']['pmproject-projectcategory'] = t('Project Management Project: Project Category.');
    $tokens['node']['pmproject-projectpriority'] = t('Project Management Project: Project Priority.');
    $tokens['node']['pmproject-durationunit'] = t('Project Management Project: Project Duration Unit.');
    $tokens['node']['pmproject-duration'] = t('Project Management Project: Project Duration.');
    $tokens['node']['pmproject-datebegin'] = t('Project Management Project: Project Begin Date.');
    $tokens['node']['pmproject-dateend'] = t('Project Management Project: Project End Date.');
    $tokens['node']['pmproject-billable'] = t('Project Management Project: Project Billable.');
    $tokens['node']['pmproject-billed'] = t('Project Management Project: Project Billed.');
    $tokens['node']['pmproject-price'] = t('Project Management Project: Project Price.');
    $tokens['node']['pmproject-pricemode'] = t('Project Management Project: Project Price Mode.');
    if (module_exists('pmorganization')) {
      $tokens['node']['pmproject-organization-nid'] = t('Project Management Project: Organization Node ID.');
      $tokens['node']['pmproject-organization-title'] = t('Project Management Project: Organization Title.');
    }
    if (module_exists('pmperson')) {
      // Project Manager
      $tokens['node']['pmproject-manager-title'] = t('Project Management Project: Project Manager Title.');
      $tokens['node']['pmproject-manager-uid'] = t('Project Management Project: Project Manager User ID.');
      $tokens['node']['pmproject-manager-name'] = t('Project Management Project: Project Manager Name.');
      $tokens['node']['pmproject-manager-fullname'] = t('Project Management Project: Project Manager Full Name.');
      $tokens['node']['pmproject-manager-email'] = t('Project Management Project: Project Manager Email Address.');
      // Assignee(s)
      $tokens['node']['pmproject-assigned-to-email'] = t('Project Management Project: Project Assignee(s) Email Address(s).');
      $tokens['node']['pmproject-assigned-title'] = t('Project Management Project: Project Assignee(s) Title(s).');
    }
  }
  return $tokens;
}

/**
 * Implements hook_token_values().
 */
function pmproject_token_values($type, $object = NULL) {
  $values = array();
  $node = $object;
  if ((($type == 'node') || ($type == 'all')) && ($node->type === 'pmproject')) {
    $values['pmproject-projectstatus'] = $node->projectstatus;
    $values['pmproject-projectpriority'] = $node->projectpriority;
    $values['pmproject-projectcategory'] = $node->projectcategory;
    $values['pmproject-durationunit'] = $node->durationunit;
    $values['pmproject-duration'] = $node->duration;
    $values['pmproject-datebegin'] = format_date($node->datebegin, 'medium', '', variable_get('date_default_timezone', NULL));
    $values['pmproject-dateend'] = format_date($node->dateend, 'medium', '', variable_get('date_default_timezone', NULL));
    $values['pmproject-price'] = $node->price;
    $values['pmproject-pricemode'] = $node->pricemode;
    $values['pmproject-billable'] = $node->billable;
    $values['pmproject-billed'] = $node->billed;
    if (module_exists('pmorganization')) {
      $values['pmproject-organization-nid'] = $node->organization_nid;
      $values['pmproject-organization-title'] = $node->organization_title;
    }
    if (module_exists('pmperson')) {
      // Project Manager
      if ($node->manager_nid) {
        $manager = node_load($node->manager_nid);
        $values['pmproject-manager-uid'] = $manager->user_uid;
        $values['pmproject-manager-name'] = $manager->title;
        $values['pmproject-manager-fullname'] = $manager->fullname;
        $values['pmproject-manager-email'] = pmperson_primary_email($manager);
        $values['pmproject-manager-title'] = $node->manager_title;
      }
      else {
        $values['pmproject-manager-email'] = NULL;
      }
      // Project Assignee(s) e-mail
      if ($node->assigned_nid) {
        $values['pmproject-assigned-title'] = $node->assigned_title;
        $assignees_node = node_load($node->assigned_nid);
        // Assigned to one person
        if ($assignees_node->type === 'pmperson') {
          $values['pmproject-assigned-to-email'] = pmperson_primary_email($assignees_node);
        }
        // Assigned to a team
        else {
          $assignees_array = $assignees_node->members_array;
          $assignees = array();
          foreach ($assignees_array as $nid => $name) {
            $assignee = node_load($nid);
            $assignees[] = pmperson_primary_email($assignee);
          }
          $assigned = implode(", ", $assignees);
          // Return comma separated list of emails
          $values['pmproject-assigned-to-email'] = $assigned;
        }
      }
      else {
        $values['pmproject-assigned-to-email'] = NULL;
      }
    }
  }
  return $values;
}

/**
 * Implements  hook_node_access_records().
 */
function pmproject_node_access_records($node) {
  if (empty($node->status)) {
    // Lets Drupal take care of permission to unpublished nodes.
    return array();
  }
  $type = is_string($node) ? $node : $node->type;
  $grants = array();
  if ($type == 'pmproject') {
    // Project Management Project: view all
    $grants[] = array(
      'realm' => 'pmproject_view_all',
      'gid' => 0,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // Project Management Project: view own
    $grants[] = array(
      'realm' => 'pmproject_view_own',
      'gid' => $node->uid,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // Project Management Project: view of user organization
    if (isset($node->organization_nid) && !empty($node->organization_nid)) {
      $grants[] = array(
        'realm' => 'pmproject_view_if_user_organization',
        'gid' => $node->organization_nid,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
    }
    // Project Management Project: view if project manager
    if (isset($node->manager_nid) && !empty($node->manager_nid)) {
      $grants[] = array(
        'realm' => 'pmproject_view_if_manager',
        'gid' => $node->manager_nid,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
    }
    // Project Management Project: view if assigned to project
    if (isset($node->assigned_nid) && !empty($node->assigned_nid)) {
      $grants[] = array(
        'realm' => 'pmproject_view_if_assigned',
        'gid' => $node->assigned_nid,
        'grant_view' => 1,
        'grant_update' => 0,
        'grant_delete' => 0,
        'priority' => 0,
      );
    }
    // Project Management Project: edit all
    $grants[] = array(
      'realm' => 'pmproject_update_all',
      'gid' => 0,
      'grant_view' => 0,
      'grant_update' => 1,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // Project Management Project: edit own
    $grants[] = array(
      'realm' => 'pmproject_update_own',
      'gid' => $node->uid,
      'grant_view' => 0,
      'grant_update' => 1,
      'grant_delete' => 0,
      'priority' => 0,
    );
    // Project Management Project: edit of user organization
    if (isset($node->organization_nid) && !empty($node->organization_nid)) {
      $grants[] = array(
        'realm' => 'pmproject_update_if_user_organization',
        'gid' => $node->organization_nid,
        'grant_view' => 0,
        'grant_update' => 1,
        'grant_delete' => 0,
        'priority' => 0,
      );
    }
    // Project Management Project: edit if project manager
    if (isset($node->manager_nid) && !empty($node->manager_nid)) {
      $grants[] = array(
        'realm' => 'pmproject_update_if_manager',
        'gid' => $node->manager_nid,
        'grant_view' => 0,
        'grant_update' => 1,
        'grant_delete' => 0,
        'priority' => 0,
      );
    }
    // Project Management Project: edit if assigned to project
    if (isset($node->assigned_nid) && !empty($node->assigned_nid)) {
      $grants[] = array(
        'realm' => 'pmproject_update_if_assigned',
        'gid' => $node->assigned_nid,
        'grant_view' => 0,
        'grant_update' => 1,
        'grant_delete' => 0,
        'priority' => 0,
      );
    }
    // Project Management Project: delete all
    $grants[] = array(
      'realm' => 'pmproject_delete_all',
      'gid' => 0,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 1,
      'priority' => 0,
    );
    // Project Management Project: delete own
    $grants[] = array(
      'realm' => 'pmproject_delete_own',
      'gid' => $node->uid,
      'grant_view' => 0,
      'grant_update' => 0,
      'grant_delete' => 1,
      'priority' => 0,
    );
    // Project Management Project: delete of user organization
    if (isset($node->organization_nid) && !empty($node->organization_nid)) {
      $grants[] = array(
        'realm' => 'pmproject_delete_if_user_organization',
        'gid' => $node->organization_nid,
        'grant_view' => 0,
        'grant_update' => 0,
        'grant_delete' => 1,
        'priority' => 0,
      );
    }
    // Project Management Project: delete if project manager
    if (isset($node->manager_nid) && !empty($node->manager_nid)) {
      $grants[] = array(
        'realm' => 'pmproject_delete_if_manager',
        'gid' => $node->manager_nid,
        'grant_view' => 0,
        'grant_update' => 0,
        'grant_delete' => 1,
        'priority' => 0,
      );
    }
    // Project Management Project: delete if assigned to project
    if (isset($node->assigned_nid) && !empty($node->assigned_nid)) {
      $grants[] = array(
        'realm' => 'pmproject_delete_if_assigned',
        'gid' => $node->assigned_nid,
        'grant_view' => 0,
        'grant_update' => 0,
        'grant_delete' => 1,
        'priority' => 0,
      );
    }
  }
  return $grants;
}

/**
 * Implements hook_node_grants().
 */
function pmproject_node_grants($account, $op) {
  if (module_exists('pmperson')) {
    _pmperson_user_load($account);
    if (!empty($account->pmteam) AND is_array($account->pmteam)) {
      $assigned_nids = $account->pmteam;
    }
    if (isset($account->pmperson_nid) AND !empty($account->pmperson_nid)) {
      $assigned_nids[] = $account->pmperson_nid;
    }
  }
  $grants = array();
  switch ($op) {
    case 'view':
      if (user_access('Project Management Project: view all', $account)) {
        $grants['pmproject_view_all'] = array(0);
      }
      if (user_access('Project Management Project: view own', $account)) {
        $grants['pmproject_view_own'] = array($account->uid);
      }
      if (user_access('Project Management Project: view of user organization', $account)) {
        $grants['pmproject_view_if_user_organization'] = array($account->pmorganization_nid);
      }
      if (isset($account->pmperson_nid)) {
        if (user_access('Project Management Project: view if project manager', $account)) {
          $grants['pmproject_view_if_manager'] = array($account->pmperson_nid);
        }
        if (user_access('Project Management Project: view if assigned to project', $account)) {
          $grants['pmproject_view_if_assigned'] = $assigned_nids;
        }
      }
      break;

    case 'update':
      if (user_access('Project Management Project: edit all', $account)) {
        $grants['pmproject_update_all'] = array(0);
      }
      if (user_access('Project Management Project: edit own', $account)) {
        $grants['pmproject_update_own'] = array($account->uid);
      }
      if (user_access('Project Management Project: edit of user organization', $account)) {
        $grants['pmproject_update_if_user_organization'] = array($account->pmorganization_nid);
      }
      if (isset($account->pmperson_nid)) {
        if (user_access('Project Management Project: edit if project manager', $account)) {
          $grants['pmproject_update_if_manager'] = array($account->pmperson_nid);
        }
        if (user_access('Project Management Project: edit if assigned to project', $account)) {
          $grants['pmproject_update_if_assigned'] = $assigned_nids;
        }
      }
      break;

    case 'delete':
      if (user_access('Project Management Project: delete all', $account)) {
        $grants['pmproject_delete_all'] = array(0);
      }
      if (user_access('Project Management Project: delete own', $account)) {
        $grants['pmproject_delete_own'] = array($account->uid);
      }
      if (user_access('Project Management Project: delete of user organization', $account)) {
        $grants['pmproject_delete_if_user_organization'] = array($account->pmorganization_nid);
      }
      if (isset($account->pmperson_nid)) {
        if (user_access('Project Management Project: delete if project manager', $account)) {
          $grants['pmproject_delete_if_manager'] = array($account->pmperson_nid);
        }
        if (user_access('Project Management Project: delete if assigned to project', $account)) {
          $grants['pmproject_delete_if_assigned'] = $assigned_nids;
        }
      }
      break;
  }
  return $grants;
}

/**
 * Implements hook_pm_dashboard_links().
 */
function pmproject_pm_dashboard_links($type) {
  $links = array();
  if ($type == 'page' || $type == 'block') {
    $links[] = array(
      'theme' => 'pm_dashboard_link',
      'title' => t('Projects'),
      'icon' => 'pmprojects',
      'path' => 'pm/projects',
      'params' => array(),
      'node_type' => 'pmproject',
      'add_type' => 'pmproject',
      'map' => array(),
      'weight' => 4,
    );
  }
  return $links;
}
