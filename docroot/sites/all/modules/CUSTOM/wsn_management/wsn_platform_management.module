<?php
/**
 * @file
 * Message tracking feature module for Drupal SMS Framework.
 *
 * @package wsn_platform
 * @subpackage wsn_platform_management
 */

/**
 * Implements hook_help().
 *
 * @param $path
 *   URI string
 * @param $arg
 *  Page argument array
 *
 * @return
 *   HTML page content string
 */
function wsn_platform_management_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#wsn_platform_management":
      $output = t("<i>TO BE RE-WRITTEN</i>This module uses a database table to store messages, and implements Views for reporting.");
      break;
  }
  return $output;
}


// /**
 // * Implements hook_cron().
 // */
// function wsn_platform_management_cron() {
  // // Ensure that we only run at most once per hour
  // $last_run = variable_get('wsn_platform_management_archive_cron_last_run', 0);
  // $time_an_hour_ago = REQUEST_TIME - 3600;
  // if ($last_run <= $time_an_hour_ago) {
    // // Purge the archive
    // wsn_platform_management_archive_purge();
    // variable_set('wsn_platform_management_archive_cron_last_run', REQUEST_TIME);
  // }
// }

/**
 * Implements hook_menu().
 *
 * @return
 *   Drupal menu items array
 */
function wsn_platform_management_menu() {
  $items = array();

  $items['admin/wsn_platform'] = array(
    'title' => 'WSN Platform',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/wsn_platform/wsn_platform_management'] = array(
    'title' => 'Message tracking',
    'description' => 'Options and view for the message archive.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wsn_platform_management_settings_form'),
    'access arguments' => array('administer wsn_platform'),
    'file' => 'wsn_platform_management.admin.inc',
  );
  $items['admin/wsn_platform/wsn_platform_management/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
    $items['wsn_platform_management/sms_receiver'] = array(
    'title' => 'WSN Platform SMS Gateway',
    'page callback' => 'wsn_platform_management_sms_gateway',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );  
    $items['wsn_platform_management/test'] = array(
    'title' => 'WSN Platform SMS Gateway',
    'page callback' => 'wsn_platform_management_remote_parsing',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );  
  return $items;
}

/**
 * Write a record to the DB table
 *
 * @param $direction
 *   Direction integer of message (0=outgoing, 1=incoming)
 * @param $number
 *   MSISDN of remote
 * @param $message
 *   SMS message body string
 * @param $options
 *   Array of additional options
 * @return
 *   DB Query result
 */
function wsn_platform_management_archive_write($status, $number, $message, $mid, $raw) {
  //$gw_number = (array_key_exists('gw_number', $options)) ? $options['gw_number'] : NULL;
  $created = REQUEST_TIME;

  $result = $id = db_insert('wsn_platform_management')
  ->fields(array(
    'reference' => $mid,
    'number' => $number,
    'message' => $message,
    'created' => $created,
    'status' => $status,
    'raw_data' => $raw,
  ))
  ->execute();
}


/**
 * Receive an SMS message and pass it into the SMS Framework
 */
function wsn_platform_management_sms_gateway() {
   $token = $_REQUEST['token'];
   $from = $_REQUEST['from'];
   $to = $_REQUEST['to'];
   $mid = $_REQUEST['mid'];
   $text = $_REQUEST['text'];
  $text = '£8K88KL#C8K88KL#C8K88KL#C4¤@';   
   $data = array(
      'token' => $token,
      'from' => $from,
      'to' => $to,
      'umid' => $mid,
      'text' => $text
    );
   
   // calling the real sms gateway function
   // in this case twowaysms
   // future work to make it as a form
   $url =  'http://'. $_SERVER['HTTP_HOST'] . '/sms/twowaysms/receiver';
   $full_url = url($url, array('query' => $data));
   drupal_http_request($full_url);
   
   //function to write archive to local wsn_platform for debugging purposes
   $status = 1;
   $textback = 'ER';
   
   if(1){
      $status = 0;
      $textback = '£OK';
   }
   
   //if not in localhost // only development purposes
   if($_SERVER['SERVER_NAME']!='dev-epanipipe.local') {
          sms_send($from, $textback);
   }
   $raws = wsn_platform_management_remote_parsing($text);
   $raw = serialize($raws);
   wsn_platform_management_archive_write($status, $to, $text, $mid, $raw);
}


/**
 * Clean String UTF-8 Conversion
 * @param text
 * @return error or parsed message
 */
function wsn_platform_management_categorise_message($text){
  
  if(!strcmp(substr($text,0,2), variable_get('wsn_data_prefix')))
      return 1;
  if(!strcmp(substr($text,0,2), variable_get('wsn_warning_prefix')))
      return 2;
  if(!strcmp(substr($text,0,2), variable_get('wsn_command_prefix')))
      return 3;
}
/*
 * 
 * 
 *
 */
 
function wsn_platform_management_split_get_raw_data($text, $sen_del, $dat_del, $read_occur, $sen_num){
    //delete prefix & suffix
    $charlen = strpos($text, variable_get('wsn_suffix'));
    $newtext = substr($text, 2 , $charlen - 2);
    //check bit check
    $checkbyte = substr($newtext, -1);
    $reading = substr($newtext, 0 , strlen($newtext) - 1);
    
    $raw_data = array();
    $totalread = strlen($reading);
    $rev = $totalread;
    if($sen_num != 0){
        for($row = 0; $row < ($totalread/$sen_num) ; $row ++){
            for($col = 0; $col < ($sen_num) ; $col ++){
            $raw_data[$col][$row] = substr($reading, $totalread-$rev, 1);
            $rev--;
            }
        }
    }
    return $raw_data;
}

function wsn_platform_management_split_get_checkbyte($text, $sen_del, $dat_del, $read_occur, $sen_num){
    //delete prefix & suffix
    $charlen = strpos($text, variable_get('wsn_suffix'));
    $newtext = substr($text, 2 , $charlen - 2);
    //check bit check
    $checkbyte = substr($newtext, -1);
    $reading = substr($newtext, 0 , strlen($newtext) - 1);
    
    $raw_data = array();
    $totalread = strlen($reading);
    $rev = $totalread;
    if($sen_num != 0){
        for($row = 0; $row < ($totalread/$sen_num) ; $row ++){
            for($col = 0; $col < ($sen_num) ; $col ++){
            $raw_data[$col][$row] = substr($reading, $totalread-$rev, 1);
            $rev--;
            }
        }
    }
    return $checkbyte;
}


function wsn_platform_management_parse_get_reading($raw_data, $checkbyte, $data_conversion, $sen_num, $read_occur){
    //delete prefix & suffix
    $checksum = 0;
    $error = 0;
    $raw_reading =array();
    if(strcmp($data_conversion,'CHAR-DEC-32')){
        for($row = 0; $row < $read_occur ; $row ++){
            for($col = 0; $col < sen_number ; $col ++){
              $raw_reading[$col][$row] = ord( $raw_data[$col][$row]) - 32;
              $checksum += $raw_reading[$col][$row];
            }
        }
        if($checkbyte == (checksum%95)){
          $error = 3;
        }
    }
    return $raw_reading;
}

function wsn_platform_management_parse_check_reading($raw_data, $checkbyte, $data_conversion, $sen_num, $read_occur){
    //delete prefix & suffix
    $checksum = 0;
    $error = 0;
    if(strcmp($data_conversion,'CHAR-DEC-32')){
        for($row = 0; $row < $read_occur ; $row ++){
            for($col = 0; $col < sen_number ; $col ++){
              $raw_reading[$col][$row] = ord( $raw_data[$col][$row]) - 32;
              $checksum += $raw_reading[$col][$row];
            }
        }
        if($checkbyte == (checksum%95)){
          $error = 3;
        }
    }
    return $error;
}

/**
 * Implementing Text Passed to Parsing Data
 * @param text
 * Text to be parsed
 * 
 * @param from
 * Identifier Text
 * 
 * @return arraydata
 * Return array of data parsed
 * Return if data is okay or not
 * 
 */
function wsn_platform_management_process_check_data($text, $from){
  //sample data if not available    
  //$text = '£8K88KL#C8K88KL#C8K88KL#C4¤@';
  $sen_del = '';
  $dat_del = '';
  $read_occur = 3;
  $sen_num = 8;
  $data_conversion = 'CHAR-DEC-32';
  
  
  $utf_text = utf8_encode($text); 
  switch(wsn_platform_management_categorise_message($utf_text)){
    case 1:
        {
        $raw_datas = wsn_platform_management_split_get_raw_data($utf_text, $sen_del, $dat_del, $read_occur, $sen_num);
        $check_byte = wsn_platform_management_split_get_checkbyte($utf_text, $sen_del, $dat_del, $read_occur, $sen_num);
        $raw_readings = wsn_platform_management_parse_get_reading($raw_datas, $check_byte, $data_conversion, $sen_num, $read_occur);
        $error = wsn_platform_management_parse_check_reading($raw_datas, $check_byte, $data_conversion, $sen_num, $read_occur);
        }
        break;
  }
 return $check_byte;
}

function wsn_platform_management_process_process_data($text, $from){
  //sample data if not available    
  $text = '£8K88KL#C8K88KL#C8K88KL#C4¤@';
  $sen_del = '';
  $dat_del = '';
  $read_occur = 3;
  $sen_num = 8;
  $data_conversion = 'CHAR-DEC-32';
 
  $utf_text = utf8_encode($text); 
  switch(wsn_platform_management_categorise_message($utf_text)){
    case 0:
        {
        $raw_datas = wsn_platform_management_split_get_raw_data($utf_text, $sen_del, $dat_del, $read_occur, $sen_num);
        $check_byte = wsn_platform_management_split_get_checkbyte($utf_text, $sen_del, $dat_del, $read_occur, $sen_num);
        $raw_readings = wsn_platform_management_parse_get_reading($raw_datas, $check_byte, $data_conversion, $sen_num, $read_occur);
        $error = wsn_platform_management_parse_check_reading($raw_datas, $check_byte, $data_conversion, $sen_num, $read_occur);
        }
        break;
  }
 return $raw_datas;
}

function wsn_platform_management_remote_parsing(){
    //$text = '£8K88KL#C8K88KL#C8K88KL#C4¤@';
    $utf_text = utf8_encode($text); 
  
    //delete prefix & suffix
    $charlen = strpos($utf_text, variable_get('wsn_suffix'));
    $newtext = substr($utf_text, 4 , $charlen - 4);
    //check bit check
    $checkbyte = substr($newtext, -1);
    $reading = substr($newtext, 0 , strlen($newtext) - 1);
    
    $raw_data = array();
    $totalread = strlen($reading);
    $rev = $totalread;
        for($row = 0; $row < 3 ; $row ++){
            for($col = 0; $col < 8 ; $col ++){
            $raw_data[$col][$row] = ord(substr($reading, $totalread-$rev, 1))-31;
            $rev--;
            }
    }
  //return $newtext;
  return serialize($raw_data);
  
}
